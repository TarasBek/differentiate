{
  "version": 3,
  "file": "differentiate.js",
  "sources": [
    "ng://differentiate/out/src/app/differentiate/differentiate.module.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate-tree.component.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DifferentiateComponent } from './components/differentiate.component';\r\nimport { DifferentiateTree } from './components/differentiate-tree.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    DifferentiateComponent,\r\n    DifferentiateTree\r\n  ],\r\n  exports: [\r\n    DifferentiateComponent\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DifferentiateModule {}\r\n",
    "/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  template: `<ul [class]=\"side\">\r\n  <li  *ngFor=\"let child of children\" \r\n    (mouseout)=\"mouseOvered(false, child.index)\"\r\n    (mouseover)=\"mouseOvered(true, child.index)\"\r\n    [class.hover]=\"child.hover\"\r\n    [class.added]=\"child.status === 5\" \r\n    [class.removed]=\"child.status === 6\" \r\n    [class.type-changed]=\"child.status === 2\" \r\n    [class.name-changed]=\"child.status === 3\" \r\n    [class.value-changed]=\"child.status === 4\">\r\n    <div class='tree-node'\r\n        [ngClass]=\"'depth-' + depth\"\r\n        [id] = \"child.id\">\r\n      <span *ngIf='child.name && child.name!=null'\r\n        class='name' \r\n        [innerHTML]=\"child.name.length ? child.name : '&nbsp;'\">\r\n      </span>\r\n      <span *ngIf='child.value && child.value!=null'\r\n        class='value' \r\n        [class.string]=\"depth > 0 && child.value && child.value.length\"\r\n        [innerHTML]=\"child.value ? child.value : '&nbsp;'\">\r\n      </span>\r\n    </div>\r\n    <differentiate-tree *ngIf=\"child.children.length\" \r\n        [level]=\"depth+1\" \r\n        (onhover)=\"bubleup($event)\"\r\n        [class.child-node]=\"child.parent != 4\" \r\n        [children]='child.children'></differentiate-tree>\r\n    <div class=\"upper\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n    <div class=\"lower\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n  </li>\r\n</ul>\r\n\r\n`,\r\n  styles: [`:host{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:inline-block;\n  width:100%; }\n\n:host.root{\n  float:left;\n  width:50%; }\n\n:host.child-node{\n  float:left; }\n\nul{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  list-style:none;\n  padding:0;\n  width:100%; }\n  ul li .hover{\n    background-color:#ddd; }\n  ul.undefined li:hover{\n    background-color:#ddd; }\n  ul.left-side{\n    border-right:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.left-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.left-side li.added .name, ul.left-side li.added .value{\n        opacity:0.2;\n        font-style:italic; }\n      ul.left-side li.added .upper{\n        border-radius:0 0 100% 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        top:0;\n        right:0; }\n        ul.left-side li.added .upper.depth-1{\n          border:2px solid #285828;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-2{\n          border:2px dotted #3f9c3f;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-3{\n          border:1px solid #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-4{\n          border:1px dotted #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-5{\n          border:1px dashed #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n      ul.left-side li.added .lower{\n        border-radius:0 100% 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        bottom:0;\n        right:0; }\n        ul.left-side li.added .lower.depth-1{\n          border:2px solid #2c612c;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-2{\n          border:2px dotted #3f9c3f;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-3{\n          border:1px solid #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-4{\n          border:1px dotted #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-5{\n          border:1px dashed #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n      ul.left-side li.removed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.removed .upper:after{\n          content:' - ';\n          color:#f00;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.removed .lower{\n        display:none; }\n      ul.left-side li.removed .tree-node span{\n        color:#f00; }\n      ul.left-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.left-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.name-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.left-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:66px;\n        top:0;\n        right:0; }\n        ul.left-side li.value-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul.right-side{\n    border-left:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.right-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.right-side li.added .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:90%;\n        top:0;\n        left:0; }\n        ul.right-side li.added .upper:after{\n          content:'+';\n          color:#4a4;\n          font-weight:bold;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.added .lower{\n        display:none; }\n      ul.right-side li.added .tree-node span{\n        color:#4a4; }\n      ul.right-side li.removed .name, ul.right-side li.removed .value{\n        -webkit-text-decoration-line:line-through;\n                text-decoration-line:line-through;\n        -webkit-text-decoration-color:#ff0600;\n                text-decoration-color:#ff0600; }\n      ul.right-side li.removed .upper{\n        border-radius:0 0 0 100%;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        top:0; }\n        ul.right-side li.removed .upper.depth-1{\n          border:2px solid #700000;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-2{\n          border:2px dotted #ca0303;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-3{\n          border:1px solid #f00;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-4{\n          border:1px dotted #f00;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-5{\n          border:1px dashed #f00;\n          border-top-width:0;\n          border-right-width:0; }\n      ul.right-side li.removed .lower{\n        border-radius:100% 0 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        bottom:0; }\n        ul.right-side li.removed .lower.depth-1{\n          border:2px solid #700000;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-2{\n          border:2px dotted #ca0303;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-3{\n          border:1px solid #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-4{\n          border:1px dotted #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-5{\n          border:1px dashed #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n      ul.right-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.right-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.name-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.right-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.value-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul .tree-node{\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    color:#7c9eb2;\n    display:table;\n    padding:0;\n    position:relative;\n    margin:0;\n    width:100%; }\n    ul .tree-node.depth-0{\n      padding-left:5px; }\n    ul .tree-node.depth-1{\n      padding-left:20px; }\n    ul .tree-node.depth-2{\n      padding-left:40px; }\n    ul .tree-node.depth-3{\n      padding-left:60px; }\n    ul .tree-node.depth-4{\n      padding-left:80px; }\n    ul .tree-node.depth-5{\n      padding-left:100px; }\n    ul .tree-node.depth-6{\n      padding-left:120px; }\n    ul .tree-node.depth-7{\n      padding-left:140px; }\n    ul .tree-node.depth-8{\n      padding-left:160px; }\n    ul .tree-node.depth-9{\n      padding-left:180px; }\n    ul .tree-node.depth-10{\n      padding-left:200px; }\n    ul .tree-node .name{\n      color:#444;\n      font-weight:bold; }\n      ul .tree-node .name:after{\n        content:':'; }\n    ul .tree-node .value.string:before{\n      content:'\"'; }\n    ul .tree-node .value.string:after{\n      content:'\"'; }\n`],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"side\")\r\n  side;\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  mouseOvered(flag, i) {\r\n    if (this.depth === 1) {\r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        side: this.side\r\n      });\r\n    }\r\n  }\r\n}\r\n",
    "/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  template: `<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"left-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"leftSide\"></differentiate-tree>\r\n<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"right-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"rightSide\"></differentiate-tree>\r\n\r\n`,\r\n  styles: [`:host{\n  border:1px solid #444;\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:block;\n  max-width:100vw;\n  max-height:300px;\n  overflow-y:auto;\n  position:relative;\n  width:100%; }\n`],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n            leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n            rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n            leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n            rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n            leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n            rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n    this.setChildrenStatus(item.children, status)\r\n    this.setChildrenStatus(newItem.children, status)\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.onlyShowDifferences) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.leftSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.rightSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const comparision = this.toInternalStruction(this.leftSideObject, this.rightSideObject);\r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n    }\r\n  }\r\n  onhover(event) {\r\n    let children;\r\n    if (event.side == 'left-side') {\r\n      children = this.rightSide[0].children;\r\n    } else {\r\n      children = this.leftSide[0].children;\r\n    }\r\n    if (children.length > event.index) {\r\n      children[event.index].hover = event.hover;\r\n    }\r\n  }\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
