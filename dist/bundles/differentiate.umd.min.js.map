{
  "version": 3,
  "file": "differentiate.umd.min.js",
  "sources": [
    "ng://differentiate/out/src/app/differentiate/components/differentiate.component.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate-tree.component.ts"
  ],
  "sourcesContent": [
    "/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  template: `<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"left-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"leftSide\"></differentiate-tree>\r\n<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"right-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"rightSide\"></differentiate-tree>\r\n\r\n`,\r\n  styles: [`:host{\n  border:1px solid #444;\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:block;\n  max-width:100vw;\n  max-height:300px;\n  overflow-y:auto;\n  position:relative;\n  width:100%; }\n`],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            value: \"\",\r\n            parent: DifferentiateNodeType.array,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            value: jsonValue,\r\n            parent: DifferentiateNodeType.array,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            value: \"\",\r\n            parent: DifferentiateNodeType.json,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            value: jsonValue,\r\n            parent: DifferentiateNodeType.json,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n            leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n            rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n            leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n            rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n            leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n            rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n      } else {\r\n        this.unify(leftNode.children, rightNode.children);\r\n      }\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length && j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n  \r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.leftSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.rightSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const comparision = this.toInternalStruction(this.leftSideObject, this.rightSideObject);\r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n    }\r\n  }\r\n  onhover(event) {\r\n    if (event.side == 'left-side') {\r\n      this.rightSide[0].children[event.index].hover = event.hover;\r\n    } else {\r\n      this.leftSide[0].children[event.index].hover = event.hover;\r\n    }\r\n  }\r\n}\r\n",
    "/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  template: `<ul [class]=\"side\">\r\n  <li  *ngFor=\"let child of children\" \r\n    (mouseout)=\"mouseOvered(false, child.index)\"\r\n    (mouseover)=\"mouseOvered(true, child.index)\"\r\n    [class.hover]=\"child.hover\"\r\n    [class.added]=\"child.status === 5\" \r\n    [class.removed]=\"child.status === 6\" \r\n    [class.type-changed]=\"child.status === 2\" \r\n    [class.name-changed]=\"child.status === 3\" \r\n    [class.value-changed]=\"child.status === 4\">\r\n    <div class='tree-node'\r\n        [ngClass]=\"'depth-' + depth\"\r\n        [id] = \"child.id\">\r\n      <span *ngIf='child.name && child.name!=null'\r\n        class='name' \r\n        [innerHTML]=\"child.name.length ? child.name : '&nbsp;'\">\r\n      </span>\r\n      <span *ngIf='child.value && child.value!=null'\r\n        class='value' \r\n        [class.string]=\"depth > 0 && child.value && child.value.length\"\r\n        [innerHTML]=\"child.value ? child.value : '&nbsp;'\">\r\n      </span>\r\n    </div>\r\n    <differentiate-tree *ngIf=\"child.children.length\" \r\n        [level]=\"depth+1\" \r\n        (onhover)=\"bubleup($event)\"\r\n        [class.child-node]=\"child.parent != 4\" \r\n        [children]='child.children'></differentiate-tree>\r\n    <div class=\"upper\" *ngIf=\"child.status > 2\"></div>\r\n    <div class=\"lower\" *ngIf=\"child.status > 2\"></div>\r\n  </li>\r\n</ul>\r\n\r\n`,\r\n  styles: [`:host{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:inline-block;\n  width:100%; }\n\n:host.root{\n  float:left;\n  width:50%; }\n\n:host.child-node{\n  float:left; }\n\nul{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  list-style:none;\n  padding:0;\n  width:100%; }\n  ul li .hover{\n    background-color:#ddd; }\n  ul.undefined li:hover{\n    background-color:#ddd; }\n  ul.left-side{\n    border-right:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.left-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.left-side li.added .name, ul.left-side li.added .value{\n        opacity:0.2;\n        font-style:italic; }\n      ul.left-side li.added .upper{\n        border:1px solid #4a4;\n        border-top-width:0;\n        border-left-width:0;\n        border-radius:0 0 100% 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        top:0;\n        right:0; }\n      ul.left-side li.added .lower{\n        border:1px solid #4a4;\n        border-bottom-width:0;\n        border-left-width:0;\n        border-radius:0 100% 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        bottom:0;\n        right:0; }\n      ul.left-side li.removed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.removed .upper:after{\n          content:' - ';\n          color:#f00;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.removed .lower{\n        display:none; }\n      ul.left-side li.removed .tree-node span{\n        color:#f00; }\n      ul.left-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.left-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.name-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.left-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:66px;\n        top:0;\n        right:0; }\n        ul.left-side li.value-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul.right-side{\n    border-left:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.right-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.right-side li.added .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:90%;\n        top:0;\n        left:0; }\n        ul.right-side li.added .upper:after{\n          content:'+';\n          color:#4a4;\n          font-weight:bold;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.added .lower{\n        display:none; }\n      ul.right-side li.added .tree-node span{\n        color:#4a4; }\n      ul.right-side li.removed .name, ul.right-side li.removed .value{\n        -webkit-text-decoration-line:line-through;\n                text-decoration-line:line-through;\n        -webkit-text-decoration-color:#ff0600;\n                text-decoration-color:#ff0600; }\n      ul.right-side li.removed .upper{\n        border:1px solid #f00;\n        border-top-width:0;\n        border-right-width:0;\n        border-radius:0 0 0 100%;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        top:0; }\n      ul.right-side li.removed .lower{\n        border:1px solid #f00;\n        border-bottom-width:0;\n        border-right-width:0;\n        border-radius:100% 0 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        bottom:0; }\n      ul.right-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.right-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.name-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.right-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.value-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul .tree-node{\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    color:#7c9eb2;\n    display:table;\n    padding:0;\n    position:relative;\n    margin:0;\n    width:100%; }\n    ul .tree-node.depth-0{\n      padding-left:5px; }\n    ul .tree-node.depth-1{\n      padding-left:20px; }\n    ul .tree-node.depth-2{\n      padding-left:40px; }\n    ul .tree-node.depth-3{\n      padding-left:60px; }\n    ul .tree-node.depth-4{\n      padding-left:80px; }\n    ul .tree-node.depth-5{\n      padding-left:100px; }\n    ul .tree-node.depth-6{\n      padding-left:120px; }\n    ul .tree-node.depth-7{\n      padding-left:140px; }\n    ul .tree-node.depth-8{\n      padding-left:160px; }\n    ul .tree-node.depth-9{\n      padding-left:180px; }\n    ul .tree-node.depth-10{\n      padding-left:200px; }\n    ul .tree-node .name{\n      color:#444;\n      font-weight:bold; }\n      ul .tree-node .name:after{\n        content:':'; }\n    ul .tree-node .value.string:before{\n      content:'\"'; }\n    ul .tree-node .value.string:after{\n      content:'\"'; }\n`],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"side\")\r\n  side;\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  mouseOvered(flag, i) {\r\n    if (this.depth === 1) {\r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        side: this.side\r\n      });\r\n    }\r\n  }\r\n}\r\n"
  ],
  "names": [
    "Math",
    "floor",
    "random",
    "result",
    "node",
    "Array",
    "children_1",
    "map",
    "item",
    "i",
    "jsonValue",
    "_this",
    "transformNodeToInternalStruction",
    "push",
    "id",
    "generateNodeId",
    "index",
    "name",
    "value",
    "parent",
    "DifferentiateNodeType",
    "array",
    "type",
    "status",
    "DifferentiateNodeStatus",
    "default",
    "children",
    "literal",
    "Object",
    "list",
    "keys",
    "children_2",
    "json",
    "pair",
    "key",
    "toUpperCase",
    "side",
    "leftNode",
    "rightNode",
    "typeChanged",
    "valueChanged",
    "nameChanged",
    "this",
    "unify",
    "reIndex",
    "DifferentiateComponent",
    "prototype",
    "copyInto",
    "newItem",
    "JSON",
    "parse",
    "stringify",
    "splice",
    "leftSide",
    "rightSide",
    "j",
    "looping",
    "x",
    "leftItemInRightSide",
    "length",
    "itemInArray",
    "undefined",
    "rightItemInLeftSide",
    "removed",
    "added",
    "leftItemFromRightItem",
    "compare",
    "toInternalStruction",
    "ngOnChanges",
    "changes",
    "leftSideObject",
    "ngOnInit",
    "rightSideObject",
    "comparision",
    "expanded",
    "isRoot",
    "onhover",
    "event",
    "hover",
    "decorators",
    "Component",
    "args",
    "selector",
    "DifferentiateTree",
    "depth",
    "parseInt",
    "level",
    "bubleup",
    "mouseOvered",
    "flag",
    "template",
    "styles",
    "Input",
    "DifferentiateModule"
  ],
  "mappings": "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"
}
