{"version":3,"sources":["ng://differentiate/src/app/differentiate/interfaces/differentiate.interfaces.ts","ng://differentiate/src/app/differentiate/components/differentiate.component.ts","ng://differentiate/src/app/differentiate/components/differentiate-tree.component.ts","ng://differentiate/src/app/differentiate/differentiate.module.ts"],"names":["literal","pair","json","array","default","typeChanged","nameChanged","valueChanged","added","removed","DifferentiateComponent","EventEmitter","Object","defineProperty","prototype","value","replace","length","this","categorizeBy","split","undefined","generateNodeId","Math","floor","random","transformNodeToOriginalStructure","node","parent","map","item","status","DifferentiateNodeStatus","DifferentiateNodeType","type","push","name","x","_this","children","transformNodeToInternalStruction","result","Array","children_1","p_1","i","jsonValue","attributeOrderIsImportant","sort","a","b","index","altName","id","list","keys","children_2","p_2","itemInArray","side","key","toUpperCase","leftItemFromRightItem","leftNode","rightNode","compare","counterpart","unify","reIndex","copyInto","newItem","JSON","parse","stringify","splice","setChildrenStatus","leftSide","rightSide","j","looping","leftItemInRightSide","rightItemInLeftSide","toInternalStruction","onlyShowDifferences","filterUnchanged","ngOnChanges","changes","leftSideObject","namedRootObject","rightSideObject","ready","ngOnInit","setTimeout","init","categorizedName","category","sideCategorizedName","names","child","String","join","collapsed","left","right","comparision","expanded","isRoot","fireCountDifference","count","listItem","ondifference","emit","lookupChildOf","parentObject","foundItem","performAdvanceToRight","leftSideInfo","rightSideInfo","modifiedChildren","onadvance","performAdvanceToLeft","onrevert","advance","event","parseInt","path","autoExpand","lc","rc","onhover","hover","Component","args","selector","template","Input","Output","DifferentiateTree","depth","level","bubleup","keyup","which","target","click","changCounter","expand","onexpand","objectPath","advanceToRightSide","advanceToLeftSide","mouseOvered","flag","preventDefault","stopPropagation","DifferentiateModule","NgModule","imports","CommonModule","declarations","exports","entryComponents","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"uUAEEA,QAAA,EACAC,KAAA,EACAC,KAAA,EACAC,MAAA,OAHAH,SAAO,cACPC,MAAI,WACJC,MAAI,WACJC,OAAK,eAGLC,UAAA,EACAC,YAAA,EACAC,YAAA,EACAC,aAAA,EACAC,MAAA,EACAC,QAAA,OALAL,YAAO,cACPC,aAAW,kBACXC,aAAW,kBACXC,cAAY,mBACZC,OAAK,YACLC,SAAO,UCTT,IAAAC,EAAA,WAwEE,SAAAA,sBA3Cc,qBAGC,kCAGa,4BAGN,uBASJ,uCAGC,gCAcR,IAAIC,EAAAA,4BAGH,IAAIA,EAAAA,+BAGD,IAAIA,EAAAA,oBAlBnBC,OAAAC,eACIH,EAAAI,UAAA,kBAAe,KADnB,SACoBC,GACVA,EAAMC,QAAQ,IAAK,IAErBC,OACJC,KAAKC,aAAeJ,EAAMK,MAAM,KAEhCF,KAAKC,aAAeE,2CAgBhBX,EAAAI,UAAAQ,0BAGN,OAAOC,KAAKC,MAAmB,IAAbD,KAAKE,UAFX,GAINf,EAAAI,UAAAY,0CAAiCC,EAAMC,cACzC1B,EAAO,GACPC,EAAQ,GA8BZ,OA5BAwB,EAAKE,IAAK,SAACC,GACT,GAAIA,EAAKC,SAAWC,EAAwBvB,QAC1C,GAAImB,IAAWK,EAAsB/B,KACnC,GAAI4B,EAAKI,OAASD,EAAsBjC,QACtCG,EAAMgC,KAAKL,EAAKf,YACX,GAAIe,EAAKI,OAASD,EAAsBhC,KAC7CC,EAAK4B,EAAKM,MAAQN,EAAKf,WAClB,GAAIe,EAAKI,OAASD,EAAsB9B,MAAO,CACpD,IAAMkC,EAAIC,EAAKZ,iCAAiCI,EAAKS,SAAUT,EAAKF,QAChEE,EAAKM,KAAKnB,OACZf,EAAK4B,EAAKM,MAAQC,EAElBnC,EAAO,CAACmC,QAEDP,EAAKI,OAASD,EAAsB/B,OAC7CA,EAAK4B,EAAKM,MAAQE,EAAKZ,iCAAiCI,EAAKS,SAAUT,EAAKF,cAErEA,IAAWK,EAAsB9B,QACtC2B,EAAKI,OAASD,EAAsBjC,QACtCG,EAAMgC,KAAKL,EAAKf,OACPe,EAAKI,OAASD,EAAsB/B,KAC7CC,EAAMgC,KAAKG,EAAKZ,iCAAiCI,EAAMA,EAAKF,SACnDE,EAAKI,OAASD,EAAsB9B,OAC7CA,EAAMgC,KAAKG,EAAKZ,iCAAiCI,EAAKS,SAAUT,EAAKF,YAKtEzB,EAAMc,OAASd,EAAQD,GAExBQ,EAAAI,UAAA0B,0CAAiCb,cACnCc,EAASd,EACb,GAAIA,aAAgBe,MAAO,CACzB,IAAMC,EAAgC,GAChCC,EAAIX,EAAsB9B,MAChCwB,EAAKE,IAAK,SAACC,EAAMe,GACf,IAAMC,EAAiBR,EAAKE,iCAAiCV,GACzDgB,aAAqBJ,OAClBJ,EAAKS,4BACRD,EAAUE,KAAK,SAACC,EAAEC,GAAO,OAAOD,EAAEb,MAAQc,EAAEd,MAAQ,EAAG,IACvDU,EAAUjB,IAAK,SAACQ,EAAsBQ,GACpCR,EAAEc,MAAQN,EACVR,EAAEe,QAAU,GAAKP,KAGrBF,EAASR,KAAK,CACZkB,GAAIf,EAAKhB,iBACT6B,MAAON,EACPT,KAAM,GACNgB,QAAS,GAAKP,EACd9B,MAAO,GACPa,OAAQgB,EACRV,KAAMD,EAAsB9B,MAC5B4B,OAAQC,EAAwB5B,WAChCmC,SAAUO,KAGZH,EAASR,KAAK,CACZkB,GAAIf,EAAKhB,iBACT6B,MAAON,EACPT,KAAM,GACNgB,QAAS,GAAKP,EACd9B,MAAO+B,EACPlB,OAAQgB,EACRV,KAAMD,EAAsBjC,QAC5B+B,OAAQC,EAAwB5B,WAChCmC,SAAU,OAIhBE,EAASE,OACJ,GAAIhB,aAAgBf,OAAQ,CACjC,IAAM0C,EAAO1C,OAAO2C,KAAK5B,GACnB6B,EAAgC,GAChCC,EAAIxB,EAAsB/B,KAC3BgB,KAAK6B,2BACRO,EAAKN,KAAK,SAACC,EAAEC,GAAO,OAAOD,GAAKC,GAAK,EAAG,IAE1CI,EAAKzB,IAAK,SAACC,EAAMe,GACf,IAAMC,EAAiBR,EAAKE,iCAAiCb,EAAKG,IAC9DgB,aAAqBJ,OAClBJ,EAAKS,4BACRD,EAAUE,KAAK,SAACC,EAAEC,GAAO,OAAOD,EAAEb,MAAQc,EAAEd,MAAQ,EAAG,IACvDU,EAAUjB,IAAK,SAACQ,EAAsBQ,GACpCR,EAAEc,MAAQN,EACVR,EAAEe,QAAU,GAAKP,KAGrBW,EAASrB,KAAK,CACZkB,GAAIf,EAAKhB,iBACT6B,MAAON,EACPT,KAAMN,EACNsB,QAAS,GAAKP,EACd9B,MAAO,GACPa,OAAQ6B,EACRvB,KAAMD,EAAsB/B,KAC5B6B,OAAQC,EAAwB5B,WAChCmC,SAAUO,KAGZU,EAASrB,KAAK,CACZkB,GAAIf,EAAKhB,iBACT6B,MAAON,EACPT,KAAMN,EACNsB,QAAS,GAAKP,EACd9B,MAAO+B,EACPlB,OAAQ6B,EACRvB,KAAMD,EAAsBhC,KAC5B8B,OAAQC,EAAwB5B,WAChCmC,SAAU,OAIhBE,EAASe,EAEX,OAAOf,GAGD/B,EAAAI,UAAA4C,qBAAYC,EAA2BhC,GAC7C,IAAIc,EACEmB,EAAMjC,EAAKO,OAASD,EAAsBjC,QACpC2B,EAAKZ,MAAM8C,cACXlC,EAAKO,OAASD,EAAsB9B,MACpCwB,EAAKyB,QACLzB,EAAKS,KAiBjB,OAfAuB,EAAK9B,IAAK,SAACC,GACLA,EAAKI,OAASD,EAAsBjC,QAClC8B,EAAKf,MAAM8C,gBAAkBD,IAC/BnB,EAASX,GAEFA,EAAKI,OAASD,EAAsB9B,MACzC2B,EAAKsB,UAAYQ,IACnBnB,EAASX,GAGPA,EAAKM,OAASwB,IAChBnB,EAASX,KAIRW,GAGD/B,EAAAI,UAAAgD,+BAAsBC,EAA6BC,GACzD,IAAIvB,EACJ,IAAKsB,IAAaC,EAChB,OAAOvB,EAET,IAAMmB,EAAMI,EAAU9B,OAASD,EAAsBjC,QACrCgE,EAAUjD,MAAM8C,cAChBG,EAAU9B,OAASD,EAAsB9B,MACzC6D,EAAUZ,QACVY,EAAU5B,KAe1B,OAbI2B,EAAS7B,OAASD,EAAsBjC,QACtC+D,EAAShD,MAAM8C,gBAAkBD,IACnCnB,EAASsB,GAEFA,EAAS7B,OAASD,EAAsB9B,MAC7C4D,EAASX,UAAYQ,IACvBnB,EAASsB,GAGPA,EAAS3B,OAASwB,IACpBnB,EAASsB,GAGNtB,GAGD/B,EAAAI,UAAAmD,iBAAQF,EAA6BC,GACvCD,EAAS7B,OAAS8B,EAAU9B,MAC9B6B,EAAShC,OAASC,EAAwB3B,YAC1C2D,EAAUjC,OAASC,EAAwB3B,YAC3C0D,EAASG,YAAcF,EAAUX,GACjCW,EAAUE,YAAcH,EAASV,IACxBU,EAAS7B,OAASD,EAAsBjC,QAC7C+D,EAAShD,QAAUiD,EAAUjD,QAC/BgD,EAAShC,OAASC,EAAwBzB,aAC1CyD,EAAUjC,OAASC,EAAwBzB,aAC3CwD,EAASG,YAAcF,EAAUX,GACjCW,EAAUE,YAAcH,EAASV,IAE1BU,EAAS7B,OAASD,EAAsBhC,MAC7C8D,EAAS3B,OAAS4B,EAAU5B,OAC9B2B,EAAShC,OAASC,EAAwB1B,YAC1C0D,EAAUjC,OAASC,EAAwB1B,YAC3CyD,EAASG,YAAcF,EAAUX,GACjCW,EAAUE,YAAcH,EAASV,IAE/BU,EAAShD,QAAUiD,EAAUjD,QAC/BgD,EAAShC,OAASC,EAAwBzB,aAC1CyD,EAAUjC,OAASC,EAAwBzB,aAC3CwD,EAASG,YAAcF,EAAUX,GACjCW,EAAUE,YAAcH,EAASV,MAG/BU,EAAS3B,OAAS4B,EAAU5B,OAC9B2B,EAAShC,OAASC,EAAwB1B,YAC1C0D,EAAUjC,OAASC,EAAwB1B,YAC3CyD,EAASG,YAAcF,EAAUX,GACjCW,EAAUE,YAAcH,EAASV,IAEnCnC,KAAKiD,MAAMJ,EAASxB,SAAUyB,EAAUzB,YAGpC7B,EAAAI,UAAAsD,iBAAQd,cACdA,EAAKzB,IAAI,SAACC,EAAMe,GACdf,EAAKqB,MAAQN,EACbP,EAAK8B,QAAQtC,EAAKS,aAGd7B,EAAAI,UAAAuD,kBACIV,EACA7B,EACAqB,EACApB,GACV,IAAMuC,EAAUC,KAAKC,MAAMD,KAAKE,UAAU3C,IAC1C6B,EAAKe,OAAOvB,EAAO,EAAGmB,GACtBpD,KAAKkD,QAAQT,GAEb7B,EAAKC,OAASA,EACduC,EAAQvC,OAASA,EACjBD,EAAKoC,YAAcI,EAAQjB,GAC3BiB,EAAQJ,YAAcpC,EAAKuB,GAC3BnC,KAAKyD,kBAAkB7C,EAAKS,SAAUR,GACtCb,KAAKyD,kBAAkBL,EAAQ/B,SAAUR,IAEnCrB,EAAAI,UAAA6D,2BAAkBrB,EAAMvB,cAC9BuB,EAAKzB,IAAK,SAACQ,GACTA,EAAEN,OAASA,EACXO,EAAKqC,kBAAkBtC,EAAEE,SAAUR,MAG/BrB,EAAAI,UAAAqD,eAAMS,EAA+BC,GAG3C,IAFA,IAAIhC,EAAI,EAAGiC,EAAI,EAAGC,GAAU,EAErBA,GAAS,CACd,IAgEM1C,EAhEF2C,EAAyCnC,EAAI+B,EAAS3D,OAASC,KAAKwC,YAAYmB,EAAWD,EAAS/B,IAAMxB,UAC1G4D,EAAyCH,EAAID,EAAU5D,OAASC,KAAKwC,YAAYkB,EAAUC,EAAUC,IAAMzD,UAE/G,IAAK2D,GAAuBnC,EAAI+B,EAAS3D,OACvC,GAAK4D,EAAU5D,OAMbC,KAAKmD,SAASQ,EAAWD,EAAS/B,GAAIA,EAAGb,EAAwBvB,SACjEqE,IAAIjC,SANJ,KAAOA,EAAI+B,EAAS3D,QAClBC,KAAKmD,SAASQ,EAAWD,EAAS/B,GAAIA,EAAGb,EAAwBvB,SACjEqE,IAAIjC,IAOV,IAAKoC,GAAuBH,EAAID,EAAU5D,OACxC,GAAK2D,EAAS3D,OAMZC,KAAKmD,SAASO,EAAUC,EAAUC,GAAIA,EAAG9C,EAAwBxB,OACjEsE,IAAIjC,SANJ,KAAOiC,EAAID,EAAU5D,QACnBC,KAAKmD,SAASO,EAAUC,EAAUC,GAAIA,EAAG9C,EAAwBxB,OACjEsE,IAAIjC,IAaV,GANKmC,IACHA,EAAsBF,EAAID,EAAU5D,OAAS4D,EAAUC,GAAKzD,WAEzD4D,IACHA,EAAsBpC,EAAI+B,EAAS3D,OAAS2D,EAAS/B,GAAKxB,WAExD2D,GAAuBA,EAAoB7B,QAAUN,EACvD,KAAOA,EAAI+B,EAAS3D,QAAQ,CAE1B,GADA+D,EAAsB9D,KAAK4C,sBAAsBe,EAAUhC,GAAI+B,EAAS/B,IAC/C,CACvBmC,EAAsBF,EAAID,EAAU5D,OAAS4D,EAAUC,GAAKzD,UAC5D,MAEAH,KAAKmD,SAASQ,EAAWD,EAAS/B,GAAIA,EAAGb,EAAwBvB,SACjEqE,IAAIjC,IAIV,GAAIoC,GAAuBA,EAAoB9B,QAAU2B,EACvD,KAAOA,EAAID,EAAU5D,QAAQ,CAE3B,GADAgE,EAAsB/D,KAAK4C,sBAAsBc,EAASE,GAAID,EAAUC,IAC/C,CACvBG,EAAsBpC,EAAI+B,EAAS3D,OAAS2D,EAAS/B,GAAKxB,UAC1D,MAEAH,KAAKmD,SAASO,EAAUC,EAAUC,GAAIA,EAAG9C,EAAwBxB,OACjEsE,IAAIjC,IAIV,GAAImC,GAAuBnC,EAAI+B,EAAS3D,QAClCoB,EAAInB,KAAKwC,YAAYmB,EAAWD,EAAS/B,MACpCR,EAAEc,QAAU6B,EAAoB7B,QACvCjC,KAAKmD,SAASO,EAAUC,EAAUC,GAAIA,EAAG9C,EAAwBxB,OAC7DqC,IACJmC,IADAF,EAC0BD,EAAU5D,OAAS4D,EAAUC,GAAKzD,WAGhE,GAAI4D,GAAuBH,EAAID,EAAU5D,QACnCoB,EAAInB,KAAKwC,YAAYkB,EAAUC,EAAUC,MACpCzC,EAAEc,QAAU8B,EAAoB9B,QACvCjC,KAAKmD,SAASQ,EAAWD,EAAS/B,GAAIA,EAAGb,EAAwBvB,SACjEqE,IACAG,IADIpC,EACsB+B,EAAS3D,OAAS2D,EAAS/B,GAAKxB,WAG1D2D,GAAuBC,IACrBD,EAAoBpD,SAAWqD,EAAoBrD,QACrDV,KAAKmD,SAASO,EAAUC,EAAUC,GAAIA,EAAG9C,EAAwBxB,OACjEU,KAAKmD,SAASQ,EAAWD,EAAS/B,GAAIA,EAAGb,EAAwBvB,UAEjES,KAAK+C,QAAQe,EAAqBC,GAEpCH,IAAIjC,KAENkC,EAAWlC,EAAI+B,EAAS3D,QAAU6D,EAAID,EAAU5D,SAG5CP,EAAAI,UAAAoE,6BAAoBnB,EAAUC,GACpC,IAAMvB,EAAS,CACbmC,SAAU1D,KAAKsB,iCAAiCuB,GAChDc,UAAW3D,KAAKsB,iCAAiCwB,IASnD,OAPA9C,KAAKiD,MAAM1B,EAAOmC,SAAUnC,EAAOoC,WAE/B3D,KAAKiE,sBACP1C,EAAOmC,SAAW1D,KAAKkE,gBAAgB3C,EAAOmC,UAC9CnC,EAAOoC,UAAY3D,KAAKkE,gBAAgB3C,EAAOoC,YAG1CpC,GAED/B,EAAAI,UAAAsE,yBAAgB9B,cAChBb,EAAS,GAaf,OAXAa,EAAKzB,IAAK,SAACC,GACTA,EAAKS,SAAWD,EAAK8C,gBAAgBtD,EAAKS,WACrCT,EAAKI,KAAOD,EAAsBhC,MAAQ6B,EAAKS,SAAStB,QACzDa,EAAKC,SAAWC,EAAwB5B,aAC1CqC,EAAON,KAAKL,KAGhBW,EAAOZ,IAAK,SAACQ,EAAsBQ,GACjCR,EAAEc,MAAQN,EACVR,EAAEe,QAAU,GAAKP,IAEZJ,GAGT/B,EAAAI,UAAAuE,YAAA,SAAYC,IACNA,EAAQvC,2BACVuC,EAAQH,qBACRG,EAAQC,gBACRD,EAAQE,iBACRF,EAAQG,mBACRvE,KAAKwE,OAAQ,EACbxE,KAAKyE,aAITjF,EAAAI,UAAA6E,SAAA,WAAA,IAAArD,EAAApB,KACE0E,WAAW,WAAI,OAAAtD,EAAKuD,QAAO,MAErBnF,EAAAI,UAAAgF,yBAAgBhE,GACtB,IAAIM,EAAO,GAMX,OALAlB,KAAKC,aAAaU,IAAI,SAACkE,GACjBjE,EAAKM,OAAS2D,IAChB3D,EAAON,EAAKf,SAGTqB,GAED1B,EAAAI,UAAAkF,6BAAoBrC,cAC1BA,EAAK9B,IAAK,SAACC,GACT,IAAMmE,EAAQ,GACdnE,EAAKS,SAASV,IAAI,SAACqE,GACjB,IAAM9D,EAAOE,EAAKwD,gBAAgBI,GAC/BC,OAAO/D,GAAMnB,QACdgF,EAAM9D,KAAKC,KAGfN,EAAKX,aAA8B,EAAf8E,EAAMhF,OAAagF,EAAMG,KAAK,OAASH,EAAM,GACjEnE,EAAKuE,WAAY,KAGb3F,EAAAI,UAAA+E,2BACN,GAAI3E,KAAKqE,gBAAkBrE,KAAKuE,gBAAiB,CAC/C,IAAMa,EAAQpF,KAAKqE,0BAA0B7C,MAAUxB,KAAKqE,eAAiB,CAACrE,KAAKqE,gBAC7EgB,EAASrF,KAAKuE,2BAA2B/C,MAAUxB,KAAKuE,gBAAkB,CAACvE,KAAKuE,iBAChFe,EAActF,KAAKgE,oBAAoBoB,EAAMC,GAC/CrF,KAAKC,eACPD,KAAK8E,oBAAoBQ,EAAY5B,UACrC1D,KAAK8E,oBAAoBQ,EAAY3B,YAEvC3D,KAAK0D,SAAW,CAAC,CACfvB,GAAInC,KAAKI,iBACTc,KAAM,GACNrB,MAAO,OACPoC,MAAO,EACPvB,OAAQK,EAAsB9B,MAC9B+B,KAAMD,EAAsB9B,MAC5BsG,UAAU,EACVC,QAAQ,EACRnE,SAAUiE,EAAY5B,WAExB1D,KAAK2D,UAAW,CAAC,CACfxB,GAAInC,KAAKI,iBACTc,KAAM,GACNrB,MAAO,OACPoC,MAAO,EACPvB,OAAQK,EAAsB9B,MAC9B+B,KAAMD,EAAsB9B,MAC5BsG,UAAU,EACVC,QAAQ,EACRnE,SAAUiE,EAAY3B,YAExBe,WAAW,WACTtD,EAAKoD,OAAQ,EACbpD,EAAKqE,uBACL,OAGEjG,EAAAI,UAAA6F,+BACN,IAAIC,EAAQ,EACZ1F,KAAK0D,SAAS,GAAGrC,SAASV,IAAK,SAACgF,GAC9BA,EAAStE,SAASV,IAAK,SAACC,GACnBA,EAAKC,SAAWC,EAAwB5B,YACzCwG,QAIN1F,KAAK4F,aAAaC,KAAKH,IAEjBlG,EAAAI,UAAAkG,uBAAcrD,EAAMsD,EAAc5D,cACpC6D,EAAY7F,UAehB,OAdIsC,EAAKN,KAAOA,EACd6D,EAAY,CAACtF,OAAQqF,EAActF,KAAMgC,GAChCA,EAAKpB,SAAStB,QACvB0C,EAAKpB,SAASV,IAAK,SAACC,GACboF,KACHA,EAAY5E,EAAK0E,cAAclF,EAAMT,UAAWgC,KAC/B6D,EAAUtF,SAAWP,UACpC6F,EAAUtF,OAAS+B,EACV7B,EAAKuB,KAAOA,IACrB6D,EAAY,CAACtF,OAAQ+B,EAAMhC,KAAMG,OAKlCoF,GAEDxG,EAAAI,UAAAqG,+BAAsBC,EAAcC,EAAetF,EAAQc,cAC3DyE,EAAmBpG,KAAK0D,SAAS,GAAGrC,SAASM,GAAGN,SAClDR,IAAWC,EAAwBvB,SACrC2G,EAAazF,KAAKI,OAASC,EAAwB5B,WACnDiH,EAAc1F,KAAKI,OAASC,EAAwB5B,WACpDc,KAAKyD,kBAAkByC,EAAazF,KAAKY,SAAU6E,EAAazF,KAAKI,QACrEb,KAAKyD,kBAAkB0C,EAAc1F,KAAKY,SAAU8E,EAAc1F,KAAKI,SAC9DA,IAAWC,EAAwBxB,OAC5C4G,EAAaxF,OAAOW,SAASmC,OAAO0C,EAAazF,KAAKwB,MAAO,GAC7DkE,EAAczF,OAAOW,SAASmC,OAAO2C,EAAc1F,KAAKwB,MAAO,GAC/DjC,KAAKkD,QAAQgD,EAAaxF,OAAOW,UACjCrB,KAAKkD,QAAQiD,EAAczF,OAAOW,WACzBR,IAAWC,EAAwB1B,aAC5C8G,EAAazF,KAAKS,KAAOiF,EAAc1F,KAAKS,KAC5CgF,EAAazF,KAAKI,OAASC,EAAwB5B,WACnDiH,EAAc1F,KAAKI,OAASC,EAAwB5B,WACpDc,KAAKyD,kBAAkByC,EAAazF,KAAKY,SAAU6E,EAAazF,KAAKI,QACrEb,KAAKyD,kBAAkB0C,EAAc1F,KAAKY,SAAU8E,EAAc1F,KAAKI,SAC9DA,IAAWC,EAAwBzB,cAC5C8G,EAAc1F,KAAKZ,MAAQqG,EAAazF,KAAKZ,MAC7CsG,EAAc1F,KAAKI,OAASC,EAAwB5B,WACpDgH,EAAazF,KAAKI,OAASC,EAAwB5B,WACnDc,KAAKyD,kBAAkByC,EAAazF,KAAKY,SAAU6E,EAAazF,KAAKI,QACrEb,KAAKyD,kBAAkB0C,EAAc1F,KAAKY,SAAU8E,EAAc1F,KAAKI,SAC9DA,IAAWC,EAAwB3B,cAC5C+G,EAAazF,KAAKO,KAAOmF,EAAc1F,KAAKO,KAC5CkF,EAAazF,KAAKI,OAASC,EAAwB5B,WACnDiH,EAAc1F,KAAKI,OAASC,EAAwB5B,WACpDc,KAAKyD,kBAAkByC,EAAazF,KAAKY,SAAU6E,EAAazF,KAAKI,QACrEqF,EAAazF,KAAKY,SAAW8E,EAAc1F,KAAKY,UAElDqD,WAAW,WACTtD,EAAKiF,UAAUR,KAAK,CAClB5D,MAAON,EACPlB,KAAMW,EAAKZ,iCAAiC4F,EAAkBrF,EAAsB/B,QAEtFoC,EAAKqE,uBACJ,KAEGjG,EAAAI,UAAA0G,8BAAqBJ,EAAcC,EAAetF,EAAQc,cAC1DyE,EAAmBpG,KAAK2D,UAAU,GAAGtC,SAASM,GAAGN,SACnDR,IAAWC,EAAwBxB,OACrC4G,EAAazF,KAAKI,OAASC,EAAwB5B,WACnDiH,EAAc1F,KAAKI,OAASC,EAAwB5B,WACpDc,KAAKyD,kBAAkByC,EAAazF,KAAKY,SAAU6E,EAAazF,KAAKI,QACrEb,KAAKyD,kBAAkB0C,EAAc1F,KAAKY,SAAU8E,EAAc1F,KAAKI,SAC9DA,IAAWC,EAAwBvB,SAC5C2G,EAAaxF,OAAOW,SAASmC,OAAO0C,EAAazF,KAAKwB,MAAO,GAC7DkE,EAAczF,OAAOW,SAASmC,OAAO2C,EAAc1F,KAAKwB,MAAO,GAC/DjC,KAAKkD,QAAQgD,EAAaxF,OAAOW,UACjCrB,KAAKkD,QAAQiD,EAAczF,OAAOW,WACzBR,IAAWC,EAAwB1B,aAC5C+G,EAAc1F,KAAKS,KAAOgF,EAAazF,KAAKS,KAC5CiF,EAAc1F,KAAKI,OAASC,EAAwB5B,WACpDgH,EAAazF,KAAKI,OAASC,EAAwB5B,WACnDc,KAAKyD,kBAAkByC,EAAazF,KAAKY,SAAU6E,EAAazF,KAAKI,QACrEb,KAAKyD,kBAAkB0C,EAAc1F,KAAKY,SAAU8E,EAAc1F,KAAKI,SAC9DA,IAAWC,EAAwBzB,cAC5C6G,EAAazF,KAAKZ,MAAQsG,EAAc1F,KAAKZ,MAC7CqG,EAAazF,KAAKI,OAASC,EAAwB5B,WACnDiH,EAAc1F,KAAKI,OAASC,EAAwB5B,WACpDc,KAAKyD,kBAAkByC,EAAazF,KAAKY,SAAU6E,EAAazF,KAAKI,QACrEb,KAAKyD,kBAAkB0C,EAAc1F,KAAKY,SAAU8E,EAAc1F,KAAKI,SAC9DA,IAAWC,EAAwB3B,cAC5CgH,EAAc1F,KAAKO,KAAOkF,EAAazF,KAAKO,KAC5CmF,EAAc1F,KAAKI,OAASC,EAAwB5B,WACpDgH,EAAazF,KAAKI,OAASC,EAAwB5B,WACnDc,KAAKyD,kBAAkByC,EAAazF,KAAKY,SAAU6E,EAAazF,KAAKI,QACrEsF,EAAc1F,KAAKY,SAAW6E,EAAazF,KAAKY,UAElDqD,WAAW,WACTtD,EAAKmF,SAASV,KAAK,CACjB5D,MAAON,EACPlB,KAAMW,EAAKZ,iCAAiC4F,EAAkBrF,EAAsB/B,QAEtFoC,EAAKqE,uBACJ,KAELjG,EAAAI,UAAA4G,QAAA,SAAQC,GACN,IAAMxE,EAAQyE,SAASD,EAAMhG,KAAKkG,KAAKzG,MAAM,KAAK,IAE/B,YAAfuG,EAAMzF,KACRhB,KAAKsG,qBACHtG,KAAK8F,cAAc9F,KAAK0D,SAAS,GAAGrC,SAASY,GAAQjC,KAAK0D,SAAS,GAAI+C,EAAMhG,KAAK0B,IAClFnC,KAAK8F,cAAc9F,KAAK2D,UAAU,GAAGtC,SAASY,GAAQjC,KAAK2D,UAAU,GAAI8C,EAAMhG,KAAKuC,aACpFyD,EAAMhG,KAAKI,OAAQoB,GAErBjC,KAAKiG,sBACHjG,KAAK8F,cAAc9F,KAAK0D,SAAS,GAAGrC,SAASY,GAAQjC,KAAK0D,SAAS,GAAI+C,EAAMhG,KAAKuC,aAClFhD,KAAK8F,cAAc9F,KAAK2D,UAAU,GAAGtC,SAASY,GAAQjC,KAAK2D,UAAU,GAAI8C,EAAMhG,KAAK0B,IACpFsE,EAAMhG,KAAKI,OAAQoB,IAGzBzC,EAAAI,UAAAgH,WAAA,SAAWH,GACT,IAAMxE,EAAQyE,SAASD,EAAMvG,MAAM,KAAK,IAClC2G,EAAK7G,KAAK2D,UAAU,GAAGtC,SAASY,GAChC6E,EAAK9G,KAAK0D,SAAS,GAAGrC,SAASY,GAErC4E,EAAG1B,WAAa0B,EAAG1B,UACnB2B,EAAG3B,WAAa2B,EAAG3B,WAErB3F,EAAAI,UAAAmH,QAAA,SAAQN,GACN,IAAMxE,EAAQyE,SAASD,EAAME,KAAKzG,MAAM,KAAK,IAE7CF,KAAK2D,UAAU,GAAGtC,SAASY,GAAOZ,SAASoF,EAAMxE,OAAO+E,MAAQP,EAAMO,MACtEhH,KAAK0D,SAAS,GAAGrC,SAASY,GAAOZ,SAASoF,EAAMxE,OAAO+E,MAAQP,EAAMO,2BApnBxEC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,gBACVC,SAAA,0jEAUCC,EAAAA,MAAKH,KAAA,CAAC,qCAGNG,EAAAA,MAAKH,KAAA,CAAC,mDAGNG,EAAAA,MAAKH,KAAA,CAAC,0DAGNG,EAAAA,MAAKH,KAAA,CAAC,+CAGNG,EAAAA,MAAKH,KAAA,CAAC,2CAGNG,EAAAA,MAAKH,KAAA,CAAC,4CAGNG,EAAAA,MAAKH,KAAA,CAAC,6CAGNG,EAAAA,MAAKH,KAAA,CAAC,6CAGNG,EAAAA,MAAKH,KAAA,CAAC,qCAWNI,EAAAA,OAAMJ,KAAA,CAAC,+BAGPI,EAAAA,OAAMJ,KAAA,CAAC,mCAGPI,EAAAA,OAAMJ,KAAA,CAAC,qBArEV,GCCAK,EAAA,wCAmBc,6BAMW,8BAGC,cAGf,YAGF,cAGC,oBAGK,wBAMK,uCAGC,+BAGT,IAAI9H,EAAAA,2BAGH,IAAIA,EAAAA,2BAGJ,IAAIA,EAAAA,oBAEf8H,EAAA3H,UAAA6E,SAAA,WACEzE,KAAKwH,MAAQd,SAAS1G,KAAKyH,QAG7BF,EAAA3H,UAAA8H,QAAA,SAAQjB,GACNA,EAAMhE,KAAOzC,KAAKyC,KAClBzC,KAAK+G,QAAQlB,KAAKY,IAGpBc,EAAA3H,UAAA+H,MAAA,SAAMlB,GAES,KADAA,EAAMmB,OAEjBnB,EAAMoB,OAAOC,SAIjBP,EAAA3H,UAAAmI,aAAA,WACE,IAAIrC,EAAQ,EAMZ,OALA1F,KAAKqB,SAASV,IAAK,SAACC,GACfA,EAAKC,SAAWC,EAAwB5B,YACzCwG,MAGGA,GAGT6B,EAAA3H,UAAAoI,OAAA,SAAOvB,GACLzG,KAAKiI,SAASpC,KAAM7F,KAAKkI,aAE3BX,EAAA3H,UAAAgH,WAAA,SAAWH,GACTzG,KAAKiI,SAASpC,KAAKY,IAErBc,EAAA3H,UAAAuI,mBAAA,SAAmBnD,GACjBA,EAAM2B,KAAO3G,KAAKkI,YAAclI,KAAKkI,WAAWnI,OAAS,IAAI,IAAMiF,EAAM/C,MACzEjC,KAAKuG,SAASV,KAAK,CAAC7E,KAAK,UAAWP,KAAMuE,KAE5CuC,EAAA3H,UAAAwI,kBAAA,SAAkBpD,GAChBA,EAAM2B,KAAO3G,KAAKkI,YAAclI,KAAKkI,WAAWnI,OAAS,IAAI,IAAMiF,EAAM/C,MACzEjC,KAAKuG,SAASV,KAAK,CAAC7E,KAAK,SAAUP,KAAMuE,KAE3CuC,EAAA3H,UAAA4G,QAAA,SAAQC,GAENzG,KAAKuG,SAASV,KAAKY,IAGrBc,EAAA3H,UAAAyI,YAAA,SAAY5B,EAAO6B,EAAM3G,GACvB8E,EAAM8B,iBAEa,IAAfvI,KAAKwH,QACPf,EAAM+B,kBAENxI,KAAK+G,QAAQlB,KAAK,CAChBmB,MAAOsB,EACPrG,MAAON,EACPgF,KAAM3G,KAAKkI,mCAxGlBjB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qBACVC,SAAA,wsUAMCC,EAAAA,MAAKH,KAAA,CAAC,+BAGNG,EAAAA,MAAKH,KAAA,CAAC,0CAGNG,EAAAA,MAAKH,KAAA,CAAC,uDAGNG,EAAAA,MAAKH,KAAA,CAAC,yCAGNG,EAAAA,MAAKH,KAAA,CAAC,wBAGNG,EAAAA,MAAKH,KAAA,CAAC,uBAGNG,EAAAA,MAAKH,KAAA,CAAC,6BAGNG,EAAAA,MAAKH,KAAA,CAAC,oCAGNG,EAAAA,MAAKH,KAAA,CAAC,yCAGNG,EAAAA,MAAKH,KAAA,CAAC,6CAGNG,EAAAA,MAAKH,KAAA,CAAC,qCAGNI,EAAAA,OAAMJ,KAAA,CAAC,6BAGPI,EAAAA,OAAMJ,KAAA,CAAC,8BAGPI,EAAAA,OAAMJ,KAAA,CAAC,iBAzDV,GCLAuB,EAAA,oDAMCC,EAAAA,SAAQxB,KAAA,CAAC,CACRyB,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZrJ,EACA+H,GAEFuB,QAAS,CACPtJ,GAEFuJ,gBAAiB,GAEjBC,UAAW,GAEXC,QAAS,CAACC,EAAAA,8BArBZ","sourcesContent":["\r\nexport enum DifferentiateNodeType {\r\n  literal = 1,\r\n  pair = 2,\r\n  json = 3,\r\n  array = 4\r\n}\r\nexport enum DifferentiateNodeStatus {\r\n  default = 1,\r\n  typeChanged = 2,\r\n  nameChanged = 3,\r\n  valueChanged = 4,\r\n  added = 5,\r\n  removed = 6\r\n}\r\nexport interface DifferentiateNode {\r\n  id: number,\r\n  counterpart?: number,\r\n  index: number,\r\n  name: string,\r\n  altName: string,\r\n  value: string,\r\n  parent: DifferentiateNodeType,\r\n  type: DifferentiateNodeType,\r\n  children: DifferentiateNode[],\r\n  status: DifferentiateNodeStatus,\r\n  isRoot?: boolean\r\n}\r\n\r\n","/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\nimport { ThrowStmt } from '@angular/compiler';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  templateUrl: './differentiate.component.html',\r\n  styleUrls: ['./differentiate.component.scss'],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n  ready: boolean;\r\n  categorizeBy: string[];\r\n\r\n  @Input(\"allowRevert\")\r\n  allowRevert = false;\r\n\r\n  @Input(\"allowAdvance\")\r\n  allowAdvance = false;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Input('namedRootObject')\r\n  set namedRootObject(value: string) {\r\n    let x = value.replace(\" \", \"\");\r\n\r\n    if (x.length) {\r\n      this.categorizeBy = value.split(\",\");\r\n    } else {\r\n      this.categorizeBy = undefined;\r\n    }\r\n  }\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onadvance\")\r\n  onadvance = new EventEmitter();\r\n\r\n  @Output(\"ondifference\")\r\n  ondifference = new EventEmitter();\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToOriginalStructure(node, parent) {\r\n    let json = {};\r\n    let array = [];\r\n\r\n    node.map( (item: DifferentiateNode) => {\r\n      if (item.status !== DifferentiateNodeStatus.removed) {\r\n        if (parent === DifferentiateNodeType.json) {    \r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.pair) {\r\n            json[item.name] = item.value;\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            const x = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n            if (item.name.length) {\r\n              json[item.name] = x;\r\n            } else {\r\n              json = [x];\r\n            }\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            json[item.name] = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n          }\r\n        } else if (parent === DifferentiateNodeType.array){\r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            array.push(this.transformNodeToOriginalStructure(item, item.parent));\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return array.length ? array : json;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n      leftNode.counterpart = rightNode.id;\r\n      rightNode.counterpart = leftNode.id;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n    item.counterpart = newItem.id;\r\n    newItem.counterpart = item.id;\r\n    this.setChildrenStatus(item.children, status)\r\n    this.setChildrenStatus(newItem.children, status)\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant ||\r\n      changes.onlyShowDifferences ||\r\n      changes.leftSideObject ||\r\n      changes.namedRootObject ||\r\n      changes.rightSideObject) {\r\n      this.ready = false;\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    setTimeout(()=>this.init(),666);\r\n  }\r\n  private categorizedName(item) {\r\n    let name = \"\";\r\n    this.categorizeBy.map((category) => {\r\n      if (item.name === category) {\r\n        name = item.value;\r\n      }\r\n    });\r\n    return name;\r\n  }\r\n  private sideCategorizedName(side) {\r\n    side.map( (item) => {\r\n      const names = [];\r\n      item.children.map((child) => {\r\n        const name = this.categorizedName(child);\r\n        if(String(name).length) {\r\n          names.push(name);\r\n        }\r\n      });\r\n      item.categorizeBy = names.length > 1 ? names.join(\" - \") : names[0];\r\n      item.collapsed = true;\r\n    });\r\n  }\r\n  private init() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const left = (this.leftSideObject instanceof Array)  ? this.leftSideObject : [this.leftSideObject]\r\n      const right = (this.rightSideObject instanceof Array)  ? this.rightSideObject : [this.rightSideObject]\r\n      const comparision = this.toInternalStruction(left, right);\r\n      if (this.categorizeBy) {\r\n        this.sideCategorizedName(comparision.leftSide);\r\n        this.sideCategorizedName(comparision.rightSide);\r\n      }  \r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n      setTimeout(()=>{\r\n        this.ready = true;\r\n        this.fireCountDifference();\r\n      },333);\r\n    }\r\n  }\r\n  private fireCountDifference() {\r\n    let count = 0;\r\n    this.leftSide[0].children.map( (listItem) => {\r\n      listItem.children.map( (item) => {\r\n        if(item.status !== DifferentiateNodeStatus.default) {\r\n          count++;\r\n        }\r\n      });\r\n    })\r\n    this.ondifference.emit(count);\r\n  }\r\n  private lookupChildOf(side, parentObject, id) {\r\n    let foundItem = undefined;\r\n    if (side.id === id) {\r\n      foundItem = {parent: parentObject, node: side};\r\n    } else if (side.children.length) {\r\n      side.children.map( (item) => {\r\n        if (!foundItem) {\r\n          foundItem = this.lookupChildOf(item, undefined, id);\r\n          if (foundItem && foundItem.parent === undefined) {\r\n            foundItem.parent = side;\r\n          } else if (item.id === id) {\r\n            foundItem = {parent: side, node: item};\r\n          }\r\n        }\r\n      });\r\n    } \r\n    return foundItem;\r\n  }\r\n  private performAdvanceToRight(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.leftSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      leftSideInfo.node.name = rightSideInfo.node.name;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      rightSideInfo.node.value = leftSideInfo.node.value;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      leftSideInfo.node.type = rightSideInfo.node.type;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      leftSideInfo.node.children = rightSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onadvance.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  private performAdvanceToLeft(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.rightSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      rightSideInfo.node.name = leftSideInfo.node.name;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      leftSideInfo.node.value = rightSideInfo.node.value;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      rightSideInfo.node.type = leftSideInfo.node.type;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      rightSideInfo.node.children = leftSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onrevert.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  advance(event) {\r\n    const index = parseInt(event.node.path.split(\",\")[1]);\r\n\r\n    if (event.type === 'advance') {\r\n      this.performAdvanceToLeft(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.id), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.counterpart), \r\n        event.node.status, index);\r\n    } else {\r\n      this.performAdvanceToRight(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.counterpart), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.id), \r\n        event.node.status, index);\r\n    }\r\n  }\r\n  autoExpand(event) {\r\n    const index = parseInt(event.split(\",\")[1]);\r\n    const lc = this.rightSide[0].children[index];\r\n    const rc = this.leftSide[0].children[index];\r\n    \r\n    lc.collapsed = !lc.collapsed;\r\n    rc.collapsed = !rc.collapsed;\r\n  }\r\n  onhover(event) {\r\n    const index = parseInt(event.path.split(\",\")[1]);\r\n\r\n    this.rightSide[0].children[index].children[event.index].hover = event.hover;\r\n    this.leftSide[0].children[index].children[event.index].hover = event.hover;\r\n  }\r\n}\r\n","/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {DifferentiateNodeStatus} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  templateUrl: './differentiate-tree.component.html',\r\n  styleUrls: ['./differentiate-tree.component.scss'],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Input(\"collapsed\")\r\n  collapsed = true;\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"showLeftActionButton\")\r\n  showLeftActionButton = false;\r\n\r\n  @Input(\"showRightActionButton\")\r\n  showRightActionButton = false;\r\n\r\n  @Input(\"status\")\r\n  status = 1;\r\n\r\n  @Input(\"side\")\r\n  side = \"\";\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  @Input(\"objectPath\")\r\n  objectPath = \"\";\r\n\r\n  @Input(\"categorizeBy\")\r\n  categorizeBy: string;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onexpand\")\r\n  onexpand = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  keyup(event) {\r\n    const code = event.which;\r\n    if (code === 13) {\r\n      event.target.click();\r\n\t\t}\r\n  }\r\n\r\n  changCounter() {\r\n    let count = 0;\r\n    this.children.map( (item) => {\r\n      if(item.status !== DifferentiateNodeStatus.default) {\r\n        count++;\r\n      }\r\n    })\r\n    return count;\r\n  }\r\n\r\n  expand(event) {\r\n    this.onexpand.emit( this.objectPath );\r\n  }\r\n  autoExpand(event) {\r\n    this.onexpand.emit(event);\r\n  }\r\n  advanceToRightSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"advance\", node: child});\r\n  }\r\n  advanceToLeftSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"revert\", node: child});\r\n  }\r\n  advance(event) {\r\n    // bubble up the undo event.\r\n    this.onrevert.emit(event);\r\n  }\r\n\r\n  mouseOvered(event, flag, i) {\r\n    event.preventDefault();\r\n\r\n    if (this.depth === 2) {\r\n      event.stopPropagation();\r\n      \r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        path: this.objectPath\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DifferentiateComponent } from './components/differentiate.component';\r\nimport { DifferentiateTree } from './components/differentiate-tree.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    DifferentiateComponent,\r\n    DifferentiateTree\r\n  ],\r\n  exports: [\r\n    DifferentiateComponent\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DifferentiateModule {}\r\n"]}