{
  "version": 3,
  "file": "differentiate.umd.min.js",
  "sources": [
    "ng://differentiate/out/src/app/differentiate/interfaces/differentiate.interfaces.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate.component.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate-tree.component.ts",
    "ng://differentiate/out/src/app/differentiate/differentiate.module.ts"
  ],
  "sourcesContent": [
    "\r\nexport enum DifferentiateNodeType {\r\n  literal = 1,\r\n  pair = 2,\r\n  json = 3,\r\n  array = 4\r\n}\r\nexport enum DifferentiateNodeStatus {\r\n  default = 1,\r\n  typeChanged = 2,\r\n  nameChanged = 3,\r\n  valueChanged = 4,\r\n  added = 5,\r\n  removed = 6\r\n}\r\nexport interface DifferentiateNode {\r\n  id: number,\r\n  counterpart?: number,\r\n  index: number,\r\n  name: string,\r\n  altName: string,\r\n  value: string,\r\n  parent: DifferentiateNodeType,\r\n  type: DifferentiateNodeType,\r\n  children: DifferentiateNode[],\r\n  status: DifferentiateNodeStatus,\r\n  isRoot?: boolean\r\n}\r\n\r\n",
    "/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\nimport { ThrowStmt } from '@angular/compiler';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  template: `<div class=\"spinner\" *ngIf=\"!ready\">\r\n    <svg \r\n        version=\"1.1\" \r\n        id=\"loader\" \r\n        xmlns=\"http://www.w3.org/2000/svg\" \r\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\" \r\n        x=\"0px\" \r\n        y=\"0px\"\r\n        width=\"40px\" \r\n        height=\"40px\" \r\n        viewBox=\"0 0 50 50\" \r\n        style=\"enable-background:new 0 0 50 50;\" \r\n        xml:space=\"preserve\">\r\n        <path \r\n            fill=\"#000\" \r\n            d=\"M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z\">\r\n            <animateTransform attributeType=\"xml\"\r\n                attributeName=\"transform\"\r\n                type=\"rotate\"\r\n                from=\"0 25 25\"\r\n                to=\"360 25 25\"\r\n                dur=\"0.6s\"\r\n                repeatCount=\"indefinite\"/>\r\n    </path>\r\n  </svg>\r\n</div>\r\n<differentiate-tree \r\n    *ngIf=\"leftSide && rightSide\"\r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"left-side\" \r\n    (onexpand)=\"autoExpand($event)\"\r\n    (onhover)=\"onhover($event)\"\r\n    (onrevert)=\"advance($event)\"\r\n    [rightSideToolTip]=\"rightSideToolTip\"\r\n    [showLeftActionButton]=\"allowAdvance\" \r\n    [children]=\"leftSide\"></differentiate-tree>\r\n<differentiate-tree \r\n    *ngIf=\"leftSide && rightSide\"\r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"right-side\" \r\n    (onexpand)=\"autoExpand($event)\"\r\n    (onhover)=\"onhover($event)\"\r\n    (onrevert)=\"advance($event)\"\r\n    [leftSideToolTip]=\"leftSideToolTip\"\r\n    [showRightActionButton]=\"allowRevert\" \r\n    [children]=\"rightSide\"></differentiate-tree>\r\n\r\n`,\r\n  styles: [`:host{border:1px solid rgba(0,0,0,.1);-webkit-box-sizing:border-box;box-sizing:border-box;display:block;max-width:100vw;max-height:300px;overflow-y:auto;position:relative;width:100%}:host .spinner{margin:0 auto 1em;height:222px;width:20%;text-align:center;padding:1em;display:inline-block;vertical-align:top;position:absolute;top:0;left:10%;z-index:2}:host svg path,:host svg rect{fill:#1c0696}`],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n  ready: boolean;\r\n  categorizeBy: string[];\r\n\r\n  @Input(\"allowRevert\")\r\n  allowRevert = false;\r\n\r\n  @Input(\"allowAdvance\")\r\n  allowAdvance = false;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Input('namedRootObject')\r\n  set namedRootObject(value: string) {\r\n    let x = value.replace(\" \", \"\");\r\n\r\n    if (x.length) {\r\n      this.categorizeBy = value.split(\",\");\r\n    } else {\r\n      this.categorizeBy = undefined;\r\n    }\r\n  }\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onadvance\")\r\n  onadvance = new EventEmitter();\r\n\r\n  @Output(\"ondifference\")\r\n  ondifference = new EventEmitter();\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToOriginalStructure(node, parent) {\r\n    let json = {};\r\n    let array = [];\r\n\r\n    node.map( (item: DifferentiateNode) => {\r\n      if (item.status !== DifferentiateNodeStatus.removed) {\r\n        if (parent === DifferentiateNodeType.json) {    \r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.pair) {\r\n            json[item.name] = item.value;\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            const x = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n            if (item.name.length) {\r\n              json[item.name] = x;\r\n            } else {\r\n              json = [x];\r\n            }\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            json[item.name] = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n          }\r\n        } else if (parent === DifferentiateNodeType.array){\r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            array.push(this.transformNodeToOriginalStructure(item, item.parent));\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return array.length ? array : json;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n      leftNode.counterpart = rightNode.id;\r\n      rightNode.counterpart = leftNode.id;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n    item.counterpart = newItem.id;\r\n    newItem.counterpart = item.id;\r\n    this.setChildrenStatus(item.children, status)\r\n    this.setChildrenStatus(newItem.children, status)\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant ||\r\n      changes.onlyShowDifferences ||\r\n      changes.leftSideObject ||\r\n      changes.namedRootObject ||\r\n      changes.rightSideObject) {\r\n      this.ready = false;\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    setTimeout(()=>this.init(),666);\r\n  }\r\n  private categorizedName(item) {\r\n    let name = \"\";\r\n    this.categorizeBy.map((category) => {\r\n      if (item.name === category) {\r\n        name = item.value;\r\n      }\r\n    });\r\n    return name;\r\n  }\r\n  private sideCategorizedName(side) {\r\n    side.map( (item) => {\r\n      const names = [];\r\n      item.children.map((child) => {\r\n        const name = this.categorizedName(child);\r\n        if(String(name).length) {\r\n          names.push(name);\r\n        }\r\n      });\r\n      item.categorizeBy = names.length > 1 ? names.join(\" - \") : names[0];\r\n      item.collapsed = true;\r\n    });\r\n  }\r\n  private init() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const left = (this.leftSideObject instanceof Array)  ? this.leftSideObject : [this.leftSideObject]\r\n      const right = (this.rightSideObject instanceof Array)  ? this.rightSideObject : [this.rightSideObject]\r\n      const comparision = this.toInternalStruction(left, right);\r\n      if (this.categorizeBy) {\r\n        this.sideCategorizedName(comparision.leftSide);\r\n        this.sideCategorizedName(comparision.rightSide);\r\n      }  \r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n      setTimeout(()=>{\r\n        this.ready = true;\r\n        this.fireCountDifference();\r\n      },333);\r\n    }\r\n  }\r\n  private fireCountDifference() {\r\n    let count = 0;\r\n    this.leftSide[0].children.map( (item) => {\r\n      if(item.status !== DifferentiateNodeStatus.default) {\r\n        count++;\r\n      }\r\n    })\r\n    this.ondifference.emit(count);\r\n  }\r\n  private lookupChildOf(side, parentObject, id) {\r\n    let foundItem = undefined;\r\n    if (side.id === id) {\r\n      foundItem = {parent: parentObject, node: side};\r\n    } else if (side.children.length) {\r\n      side.children.map( (item) => {\r\n        if (!foundItem) {\r\n          foundItem = this.lookupChildOf(item, undefined, id);\r\n          if (foundItem && foundItem.parent === undefined) {\r\n            foundItem.parent = side;\r\n          } else if (item.id === id) {\r\n            foundItem = {parent: side, node: item};\r\n          }\r\n        }\r\n      });\r\n    } \r\n    return foundItem;\r\n  }\r\n  private performAdvanceToRight(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.leftSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      leftSideInfo.node.name = rightSideInfo.node.name;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      rightSideInfo.node.value = leftSideInfo.node.value;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      leftSideInfo.node.type = rightSideInfo.node.type;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      leftSideInfo.node.children = rightSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onadvance.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  private performAdvanceToLeft(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.rightSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      rightSideInfo.node.name = leftSideInfo.node.name;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      leftSideInfo.node.value = rightSideInfo.node.value;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      rightSideInfo.node.type = leftSideInfo.node.type;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      rightSideInfo.node.children = leftSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onrevert.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  advance(event) {\r\n    const index = parseInt(event.node.path.split(\",\")[1]);\r\n\r\n    if (event.type === 'advance') {\r\n      this.performAdvanceToLeft(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.id), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.counterpart), \r\n        event.node.status, index);\r\n    } else {\r\n      this.performAdvanceToRight(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.counterpart), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.id), \r\n        event.node.status, index);\r\n    }\r\n  }\r\n  autoExpand(event) {\r\n    const index = parseInt(event.split(\",\")[1]);\r\n    const lc = this.rightSide[0].children[index];\r\n    const rc = this.leftSide[0].children[index];\r\n    \r\n    lc.collapsed = !lc.collapsed;\r\n    rc.collapsed = !rc.collapsed;\r\n  }\r\n  onhover(event) {\r\n    const index = parseInt(event.path.split(\",\")[1]);\r\n    const lc = this.rightSide[0].children[index].children;\r\n    const rc = this.leftSide[0].children[index].children;\r\n\r\n    lc[event.index].hover = event.hover;\r\n    rc[event.index].hover = event.hover;\r\n  }\r\n}\r\n",
    "/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {DifferentiateNodeStatus} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  template: `<div *ngIf=\"categorizeBy\" \r\n  class=\"diff-heading\" \r\n  (click)=\"expand($event)\">\r\n  <span class=\"arrow\" *ngIf=\"collapsed\">&#9658;</span>\r\n  <span class=\"arrow\" *ngIf=\"!collapsed\">&#9660;</span>\r\n  <span [textContent]=\"categorizeBy\"></span>\r\n  <span class=\"counter\" [textContent]=\"changCounter()\"></span>\r\n</div>\r\n<ul [class]=\"side\" [class.child]=\"depth ===2 || (categorizeBy && categorizeBy.length)\" [class.collapsed]=\"categorizeBy && collapsed\">\r\n  <li  *ngFor=\"let child of children\" \r\n    (mouseout)=\"mouseOvered(false, child.index)\"\r\n    (mouseover)=\"mouseOvered(true, child.index)\"\r\n    [class.hover]=\"child.hover\"\r\n    [class.added]=\"child.status === 5\" \r\n    [class.removed]=\"child.status === 6\" \r\n    [class.type-changed]=\"child.status === 2\" \r\n    [class.name-changed]=\"child.status === 3\" \r\n    [class.value-changed]=\"child.status === 4\">\r\n    <div class='tree-node' [ngClass]=\"'depth-' + depth\" [class.collapsed]=\"child.collapsed\" [id] = \"child.id\">\r\n      <span [title]=\"rightSideToolTip\"\r\n        class=\"do\" \r\n        tabindex=\"0\"\r\n        aria-hidden=\"true\"\r\n        (keyup)=\"keyup($event)\"\r\n        (click)=\"advanceToRightSide(child)\"\r\n        *ngIf=\"showLeftActionButton && status !== child.status && child.status > 1\">&#9100;</span>\r\n      <span *ngIf='child.name && child.name!=null'\r\n        class='name' \r\n        [innerHTML]=\"child.name.length ? child.name : '&nbsp;'\">\r\n      </span>\r\n      <span *ngIf='child.value && child.value!=null'\r\n        class='value' \r\n        [class.string]=\"depth > 0 && child.value && child.value.length\"\r\n        [innerHTML]=\"child.value ? child.value : '&nbsp;'\">\r\n      </span>\r\n      <span [title]=\"leftSideToolTip\"\r\n        class=\"undo\" \r\n        tabindex=\"0\"\r\n        aria-hidden=\"true\"\r\n        (keyup)=\"keyup($event)\"\r\n        (click)=\"advanceToLeftSide(child)\"\r\n        *ngIf=\"showRightActionButton && status !== child.status && child.status > 1\">&#9100;</span>\r\n    </div>\r\n    <differentiate-tree *ngIf=\"child.children.length\" \r\n        [level]=\"depth+1\" \r\n        [status]=\"child.status\" \r\n        [collapsed]=\"child.collapsed\"\r\n        [categorizeBy]=\"child.categorizeBy\"\r\n        [showLeftActionButton]=\"showLeftActionButton\" \r\n        [leftSideToolTip]=\"leftSideToolTip\"\r\n        [showRightActionButton]=\"showRightActionButton\" \r\n        [rightSideToolTip]=\"rightSideToolTip\"\r\n        [objectPath]=\"objectPath + (objectPath.length ? ',':'') + child.index\"\r\n        (onhover)=\"bubleup($event)\"\r\n        (onrevert)=\"advance($event)\"\r\n        (onexpand)=\"autoExpand($event)\"\r\n        [class.child-node]=\"child.parent != 4\" \r\n        [children]='child.children'></differentiate-tree>\r\n    <div *ngIf=\"child.status > 2\" class=\"upper\" [class.collapsed]=\"child.collapsed\" [ngClass]=\"'depth-' + depth\" ></div>\r\n    <div *ngIf=\"child.status > 2\" class=\"lower\" [class.collapsed]=\"child.collapsed\" [ngClass]=\"'depth-' + depth\" ></div>\r\n  </li>\r\n</ul>\r\n\r\n`,\r\n  styles: [`:host{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%}:host.root{float:left;width:50%}:host.child-node{float:left}.diff-heading{padding:5px;font-weight:700;background:rgba(0,0,0,.02);border-bottom:1px solid rgba(0,0,0,.1);color:#666;cursor:pointer}.diff-heading .arrow{color:#999;font-size:.6rem;font-weight:700}.diff-heading .counter{float:right;border-radius:50%;width:16px;text-align:center;background-color:rgba(0,0,0,.4);font-size:.8rem;color:#fff}.diff-heading:first-child{border-top:1px solid rgba(0,0,0,.1)}ul{-webkit-box-sizing:border-box;box-sizing:border-box;list-style:none;padding:0;width:100%}ul .collapsed,ul.collapsed{display:none!important}ul li .hover{background-color:rgba(0,0,0,.1)}ul li .tree-node{position:relative}ul li .tree-node.depth-0{display:none}ul li .tree-node .do,ul li .tree-node .undo{border-radius:50%;background-color:#ddd;cursor:pointer;color:#962323;font-size:1.2rem;height:18px;line-height:1.2rem;position:absolute;text-align:center;top:0;width:18px;z-index:2}ul li .tree-node .undo{right:0}ul li .tree-node .do{left:0}ul.undefined li:hover{background-color:rgba(0,0,0,.1)}ul.left-side{border-right:1px solid rgba(0,0,0,.1);margin:0}ul.left-side li{position:relative;display:table;width:100%}ul.left-side li.added .name,ul.left-side li.added .value{opacity:.2;font-style:italic}ul.left-side li.added .upper{border-radius:0 0 100%;-webkit-box-sizing:border-box;box-sizing:border-box;height:50%;position:absolute;pointer-events:none;width:50%;top:0;right:0}ul.left-side li.added .upper.depth-1{border:2px solid #245024;border-top-width:0;border-left-width:0}ul.left-side li.added .upper.depth-2{border:2px dotted #378637;border-top-width:0;border-left-width:0}ul.left-side li.added .upper.depth-3{border:1px solid #48ad48;border-top-width:0;border-left-width:0}ul.left-side li.added .upper.depth-4{border:1px dotted #57d657;border-top-width:0;border-left-width:0}ul.left-side li.added .upper.depth-5{border:1px dashed #67fa67;border-top-width:0;border-left-width:0}ul.left-side li.added .lower{border-radius:0 100% 0 0;-webkit-box-sizing:border-box;box-sizing:border-box;height:50%;position:absolute;pointer-events:none;width:50%;bottom:0;right:0}ul.left-side li.added .lower.depth-1{border:2px solid #245024;border-bottom-width:0;border-left-width:0}ul.left-side li.added .lower.depth-2{border:2px dotted #378637;border-bottom-width:0;border-left-width:0}ul.left-side li.added .lower.depth-3{border:1px solid #48ad48;border-bottom-width:0;border-left-width:0}ul.left-side li.added .lower.depth-4{border:1px dotted #57d657;border-bottom-width:0;border-left-width:0}ul.left-side li.added .lower.depth-5{border:1px dashed #67fa67;border-bottom-width:0;border-left-width:0}ul.left-side li.removed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;width:66px;top:0;right:0;pointer-events:none}ul.left-side li.removed .upper:after{content:' - ';color:#962323;float:right;padding-right:10px;font-size:1.2rem;line-height:1.2rem}ul.left-side li.removed .lower{display:none}ul.left-side li.removed .tree-node span,ul.left-side li.type-changed .tree-node span{color:#962323}ul.left-side li.name-changed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;width:66px;top:0;right:0;pointer-events:none}ul.left-side li.name-changed .upper:after{content:' ~ ';color:#000060;font-weight:700;float:right;padding-right:10px;font-size:1.2rem;line-height:1.2rem}ul.left-side li.name-changed .tree-node .name{color:#000060}ul.left-side li.value-changed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;pointer-events:none;width:66px;top:0;right:0}ul.left-side li.value-changed .upper:after{content:' ~ ';color:#000060;font-weight:700;float:right;padding-right:10px;font-size:1.2rem;line-height:1.2rem}ul.left-side li.value-changed .tree-node .value{color:#000060}ul.right-side{border-left:1px solid rgba(0,0,0,.1);margin:0}ul.right-side li{position:relative;display:table;width:100%}ul.right-side li.added .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;pointer-events:none;width:90%;top:0;left:0}ul.right-side li.added .upper:after{content:'+';color:#4a4;font-weight:700;padding-left:5px;font-size:1.2rem;line-height:1.2rem}ul.right-side li.added .lower{display:none}ul.right-side li.added .tree-node span{color:#4a4}ul.right-side li.removed .name,ul.right-side li.removed .value{-webkit-text-decoration-line:line-through;text-decoration-line:line-through;-webkit-text-decoration-color:#962323;text-decoration-color:#962323}ul.right-side li.removed .upper{border-radius:0 0 0 100%;-webkit-box-sizing:border-box;box-sizing:border-box;height:50%;width:10%;position:absolute;pointer-events:none;top:0}ul.right-side li.removed .upper.depth-1{border:2px solid #600000;border-top-width:0;border-right-width:0}ul.right-side li.removed .upper.depth-2{border:2px dotted maroon;border-top-width:0;border-right-width:0}ul.right-side li.removed .upper.depth-3{border:1px solid #a00000;border-top-width:0;border-right-width:0}ul.right-side li.removed .upper.depth-4{border:1px dotted #c00000;border-top-width:0;border-right-width:0}ul.right-side li.removed .upper.depth-5{border:1px dashed #f00000;border-top-width:0;border-right-width:0}ul.right-side li.removed .lower{border-radius:100% 0 0;-webkit-box-sizing:border-box;box-sizing:border-box;height:50%;width:10%;position:absolute;pointer-events:none;bottom:0}ul.right-side li.removed .lower.depth-1{border:2px solid #600000;border-bottom-width:0;border-right-width:0}ul.right-side li.removed .lower.depth-2{border:2px dotted maroon;border-bottom-width:0;border-right-width:0}ul.right-side li.removed .lower.depth-3{border:1px solid #a00000;border-bottom-width:0;border-right-width:0}ul.right-side li.removed .lower.depth-4{border:1px dotted #c00000;border-bottom-width:0;border-right-width:0}ul.right-side li.removed .lower.depth-5{border:1px dashed #f00000;border-bottom-width:0;border-right-width:0}ul.right-side li.type-changed .tree-node span{color:#962323}ul.right-side li.name-changed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;pointer-events:none;top:0;left:0}ul.right-side li.name-changed .upper:before{content:' ~ ';color:#000060;font-weight:700;float:right;padding-left:5px;font-size:20px;line-height:16px}ul.right-side li.name-changed .tree-node .name{color:#000060}ul.right-side li.value-changed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;pointer-events:none;top:0;left:0}ul.right-side li.value-changed .upper:before{content:' ~ ';color:#000060;font-weight:700;float:right;padding-left:5px;font-size:20px;line-height:16px}ul.right-side li.value-changed .tree-node .value{color:#000060}ul.child{margin-top:2px!important}ul.child li{padding-top:2px;padding-bottom:2px}ul .tree-node{-webkit-box-sizing:border-box;box-sizing:border-box;color:#7c9eb2;display:table;padding:0;position:relative;margin:0;width:100%}ul .tree-node.depth-0{padding-left:5px}ul .tree-node.depth-1{padding-left:20px}ul .tree-node.depth-2{padding-left:40px}ul .tree-node.depth-3{padding-left:60px}ul .tree-node.depth-4{padding-left:80px}ul .tree-node.depth-5{padding-left:100px}ul .tree-node.depth-6{padding-left:120px}ul .tree-node.depth-7{padding-left:140px}ul .tree-node.depth-8{padding-left:160px}ul .tree-node.depth-9{padding-left:180px}ul .tree-node.depth-10{padding-left:200px}ul .tree-node .name{color:#444;font-weight:700}ul .tree-node .name:after{content:':'}ul .tree-node .value.string:after,ul .tree-node .value.string:before{content:'\"'}`],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Input(\"collapsed\")\r\n  collapsed = true;\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"showLeftActionButton\")\r\n  showLeftActionButton = false;\r\n\r\n  @Input(\"showRightActionButton\")\r\n  showRightActionButton = false;\r\n\r\n  @Input(\"status\")\r\n  status = 1;\r\n\r\n  @Input(\"side\")\r\n  side = \"\";\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  @Input(\"objectPath\")\r\n  objectPath = \"\";\r\n\r\n  @Input(\"categorizeBy\")\r\n  categorizeBy: string;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onexpand\")\r\n  onexpand = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  keyup(event) {\r\n    const code = event.which;\r\n    if (code === 13) {\r\n      event.target.click();\r\n\t\t}\r\n  }\r\n\r\n  changCounter() {\r\n    let count = 0;\r\n    this.children.map( (item) => {\r\n      if(item.status !== DifferentiateNodeStatus.default) {\r\n        count++;\r\n      }\r\n    })\r\n    return count;\r\n  }\r\n\r\n  expand(event) {\r\n    this.onexpand.emit( this.objectPath );\r\n  }\r\n  autoExpand(event) {\r\n    this.onexpand.emit(event);\r\n  }\r\n  advanceToRightSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"advance\", node: child});\r\n  }\r\n  advanceToLeftSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"revert\", node: child});\r\n  }\r\n  advance(event) {\r\n    // bubble up the undo event.\r\n    this.onrevert.emit(event);\r\n  }\r\n\r\n  mouseOvered(flag, i) {\r\n    if (this.depth === 2) {\r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        path: this.objectPath\r\n      });\r\n    }\r\n  }\r\n}\r\n",
    "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DifferentiateComponent } from './components/differentiate.component';\r\nimport { DifferentiateTree } from './components/differentiate-tree.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    DifferentiateComponent,\r\n    DifferentiateTree\r\n  ],\r\n  exports: [\r\n    DifferentiateComponent\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DifferentiateModule {}\r\n"
  ],
  "names": [
    "literal",
    "pair",
    "json",
    "array",
    "DifferentiateNodeType",
    "default",
    "typeChanged",
    "nameChanged",
    "valueChanged",
    "added",
    "removed",
    "DifferentiateNodeStatus",
    "DifferentiateComponent",
    "this",
    "allowRevert",
    "allowAdvance",
    "attributeOrderIsImportant",
    "onlyShowDifferences",
    "leftSideToolTip",
    "rightSideToolTip",
    "onrevert",
    "EventEmitter",
    "onadvance",
    "ondifference",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "value",
    "replace",
    "length",
    "categorizeBy",
    "split",
    "undefined",
    "generateNodeId",
    "Math",
    "floor",
    "random",
    "transformNodeToOriginalStructure",
    "node",
    "parent",
    "_this",
    "map",
    "item",
    "status",
    "type",
    "push",
    "name",
    "x",
    "children",
    "transformNodeToInternalStruction",
    "result",
    "Array",
    "children_1",
    "p_1",
    "i",
    "jsonValue",
    "sort",
    "a",
    "b",
    "index",
    "altName",
    "id",
    "list",
    "keys",
    "children_2",
    "p_2",
    "itemInArray",
    "side",
    "key",
    "toUpperCase",
    "leftItemFromRightItem",
    "leftNode",
    "rightNode",
    "compare",
    "counterpart",
    "unify",
    "reIndex",
    "copyInto",
    "newItem",
    "JSON",
    "parse",
    "stringify",
    "splice",
    "setChildrenStatus",
    "leftSide",
    "rightSide",
    "j",
    "looping",
    "leftItemInRightSide",
    "rightItemInLeftSide",
    "toInternalStruction",
    "filterUnchanged",
    "ngOnChanges",
    "changes",
    "leftSideObject",
    "namedRootObject",
    "rightSideObject",
    "ready",
    "ngOnInit",
    "setTimeout",
    "init",
    "categorizedName",
    "category",
    "sideCategorizedName",
    "names",
    "child",
    "String",
    "join",
    "collapsed",
    "left",
    "right",
    "comparision",
    "expanded",
    "isRoot",
    "fireCountDifference",
    "count",
    "emit",
    "lookupChildOf",
    "parentObject",
    "foundItem",
    "performAdvanceToRight",
    "leftSideInfo",
    "rightSideInfo",
    "modifiedChildren",
    "performAdvanceToLeft",
    "advance",
    "event",
    "parseInt",
    "path",
    "autoExpand",
    "lc",
    "rc",
    "onhover",
    "hover",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "Input",
    "Output",
    "DifferentiateTree",
    "showLeftActionButton",
    "showRightActionButton",
    "level",
    "objectPath",
    "onexpand",
    "depth",
    "bubleup",
    "keyup",
    "which",
    "target",
    "click",
    "changCounter",
    "expand",
    "advanceToRightSide",
    "advanceToLeftSide",
    "mouseOvered",
    "flag",
    "DifferentiateModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents",
    "providers",
    "schemas",
    "CUSTOM_ELEMENTS_SCHEMA"
  ],
  "mappings": "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"
}
