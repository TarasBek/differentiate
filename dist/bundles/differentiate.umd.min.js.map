{
  "version": 3,
  "file": "differentiate.umd.min.js",
  "sources": [
    "ng://differentiate/out/src/app/differentiate/interfaces/differentiate.interfaces.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate.component.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate-tree.component.ts",
    "ng://differentiate/out/src/app/differentiate/differentiate.module.ts"
  ],
  "sourcesContent": [
    "\r\nexport enum DifferentiateNodeType {\r\n  literal = 1,\r\n  pair = 2,\r\n  json = 3,\r\n  array = 4\r\n}\r\nexport enum DifferentiateNodeStatus {\r\n  default = 1,\r\n  typeChanged = 2,\r\n  nameChanged = 3,\r\n  valueChanged = 4,\r\n  added = 5,\r\n  removed = 6\r\n}\r\nexport interface DifferentiateNode {\r\n  id: number,\r\n  counterpart?: number,\r\n  index: number,\r\n  name: string,\r\n  altName: string,\r\n  value: string,\r\n  parent: DifferentiateNodeType,\r\n  type: DifferentiateNodeType,\r\n  children: DifferentiateNode[],\r\n  status: DifferentiateNodeStatus,\r\n  isRoot?: boolean\r\n}\r\n\r\n",
    "/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  template: `<div class=\"spinner\" *ngIf=\"!leftSide || !rightSide\">\r\n    <svg \r\n        version=\"1.1\" \r\n        id=\"loader\" \r\n        xmlns=\"http://www.w3.org/2000/svg\" \r\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\" \r\n        x=\"0px\" \r\n        y=\"0px\"\r\n        width=\"40px\" \r\n        height=\"40px\" \r\n        viewBox=\"0 0 50 50\" \r\n        style=\"enable-background:new 0 0 50 50;\" \r\n        xml:space=\"preserve\">\r\n        <path \r\n            fill=\"#000\" \r\n            d=\"M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z\">\r\n            <animateTransform attributeType=\"xml\"\r\n                attributeName=\"transform\"\r\n                type=\"rotate\"\r\n                from=\"0 25 25\"\r\n                to=\"360 25 25\"\r\n                dur=\"0.6s\"\r\n                repeatCount=\"indefinite\"/>\r\n    </path>\r\n  </svg>\r\n</div>\r\n<differentiate-tree \r\n    *ngIf=\"leftSide\"\r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"left-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"leftSide\"></differentiate-tree>\r\n<differentiate-tree \r\n    *ngIf=\"rightSide\"\r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"right-side\" \r\n    [showActionButton]=\"allowRevert\" \r\n    (onhover)=\"onhover($event)\"\r\n    (onrevert)=\"revert($event)\"\r\n    [children]=\"rightSide\"></differentiate-tree>\r\n\r\n`,\r\n  styles: [`:host{border:1px solid #444;-webkit-box-sizing:border-box;box-sizing:border-box;display:block;max-width:100vw;max-height:300px;overflow-y:auto;position:relative;width:100%}:host .spinner{margin:0 auto 1em;height:100px;width:20%;text-align:center;padding:1em;display:inline-block;vertical-align:top}:host svg path,:host svg rect{fill:#1c0696}`],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n\r\n  @Input(\"allowRevert\")\r\n  allowRevert = false;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToOriginalStructure(node, parent) {\r\n    let json = {};\r\n    let array = [];\r\n\r\n    node.map( (item: DifferentiateNode) => {\r\n      if (parent === DifferentiateNodeType.json) {        \r\n        if (item.type === DifferentiateNodeType.literal) {\r\n          array.push(item.value);\r\n        } else if (item.type === DifferentiateNodeType.pair) {\r\n          json[item.name] = item.value;\r\n        } else if (item.type === DifferentiateNodeType.array) {\r\n          const x = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n          if (item.name.length) {\r\n            json[item.name] = x;\r\n          } else {\r\n            json = [x];\r\n          }\r\n        } else if (item.type === DifferentiateNodeType.json) {\r\n          json[item.name] = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n        }\r\n      } else if (parent === DifferentiateNodeType.array){\r\n        if (item.type === DifferentiateNodeType.literal) {\r\n          array.push(item.value);\r\n        } else if (item.type === DifferentiateNodeType.json) {\r\n          array.push(this.transformNodeToOriginalStructure(item, item.parent));\r\n        } else if (item.type === DifferentiateNodeType.array) {\r\n          array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n        }\r\n      }\r\n    });\r\n    return array.length ? array : json;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n      leftNode.counterpart = rightNode.id;\r\n      rightNode.counterpart = leftNode.id;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n    item.counterpart = newItem.id;\r\n    newItem.counterpart = item.id;\r\n    this.setChildrenStatus(item.children, status)\r\n    this.setChildrenStatus(newItem.children, status)\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.onlyShowDifferences) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.leftSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.rightSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    setTimeout(()=>this.init(),66);\r\n  }\r\n  private init() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const comparision = this.toInternalStruction(this.leftSideObject, this.rightSideObject);\r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n    }\r\n  }\r\n  private lookupChildOf(side, id) {\r\n    let foundItem = undefined;\r\n    if (side.children.length) {\r\n      side.children.map( (item) => {\r\n        if (!foundItem) {\r\n          foundItem = this.lookupChildOf(item, id);\r\n          if (foundItem && foundItem.parent === undefined) {\r\n            foundItem.parent = side;\r\n          } else if (item.id === id) {\r\n            foundItem = {parent: side, node: item};\r\n          }\r\n        }\r\n      });\r\n    } else if (side.id === id) {\r\n      foundItem = {parent: undefined, node: side};\r\n    }\r\n    return foundItem;\r\n  }\r\n  revert(event) {\r\n    let leftSideInfo = this.lookupChildOf(this.leftSide[0], event.counterpart);\r\n    let rightSideInfo = this.lookupChildOf(this.rightSide[0], event.id);\r\n\r\n    if (event.status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (event.status === DifferentiateNodeStatus.removed) {\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (event.status === DifferentiateNodeStatus.nameChanged) {\r\n      rightSideInfo.node.name = leftSideInfo.node.name;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (event.status === DifferentiateNodeStatus.valueChanged) {\r\n      rightSideInfo.node.value = leftSideInfo.node.value;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (event.status === DifferentiateNodeStatus.typeChanged) {\r\n      rightSideInfo.node.type = leftSideInfo.node.type;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      rightSideInfo.node.children = leftSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onrevert.emit(\r\n        this.transformNodeToOriginalStructure(\r\n          this.rightSide[0].children, \r\n          DifferentiateNodeType.json\r\n        )\r\n      );\r\n    }, 66);\r\n  }\r\n  onhover(event) {\r\n    let children;\r\n    if (event.side == 'left-side') {\r\n      children = this.rightSide[0].children;\r\n    } else {\r\n      children = this.leftSide[0].children;\r\n    }\r\n    if (children.length > event.index) {\r\n      children[event.index].hover = event.hover;\r\n    }\r\n  }\r\n}\r\n",
    "/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  template: `<ul [class]=\"side\">\r\n  <li  *ngFor=\"let child of children\" \r\n    (mouseout)=\"mouseOvered(false, child.index)\"\r\n    (mouseover)=\"mouseOvered(true, child.index)\"\r\n    [class.hover]=\"child.hover\"\r\n    [class.added]=\"child.status === 5\" \r\n    [class.removed]=\"child.status === 6\" \r\n    [class.type-changed]=\"child.status === 2\" \r\n    [class.name-changed]=\"child.status === 3\" \r\n    [class.value-changed]=\"child.status === 4\">\r\n    <div class='tree-node'\r\n        [ngClass]=\"'depth-' + depth\"\r\n        [id] = \"child.id\">\r\n      <span *ngIf='child.name && child.name!=null'\r\n        class='name' \r\n        [innerHTML]=\"child.name.length ? child.name : '&nbsp;'\">\r\n      </span>\r\n      <span *ngIf='child.value && child.value!=null'\r\n        class='value' \r\n        [class.string]=\"depth > 0 && child.value && child.value.length\"\r\n        [innerHTML]=\"child.value ? child.value : '&nbsp;'\">\r\n      </span>\r\n      <span title=\"Undo\"\r\n        class=\"undo\" \r\n        tabindex=\"0\"\r\n        aria-hidden=\"true\"\r\n        (keyup)=\"keyup($event)\"\r\n        (click)=\"undo(child)\"\r\n        *ngIf=\"showActionButton && status !== child.status && child.status > 1\">&#x238c;</span>\r\n    </div>\r\n    <differentiate-tree *ngIf=\"child.children.length\" \r\n        [level]=\"depth+1\" \r\n        [status]=\"child.status\" \r\n        [showActionButton]=\"showActionButton\" \r\n        (onhover)=\"bubleup($event)\"\r\n        (onrevert)=\"revert($event)\"\r\n        [class.child-node]=\"child.parent != 4\" \r\n        [children]='child.children'></differentiate-tree>\r\n    <div class=\"upper\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n    <div class=\"lower\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n  </li>\r\n</ul>\r\n\r\n`,\r\n  styles: [`:host{-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;width:100%}:host.root{float:left;width:50%}:host.child-node{float:left}ul{-webkit-box-sizing:border-box;box-sizing:border-box;list-style:none;padding:0;width:100%}ul li .hover{background-color:#ddd}ul li .tree-node{position:relative}ul li .tree-node.depth-0{display:none}ul li .tree-node .undo{position:absolute;width:18px;height:18px;right:0;margin:0 5px 0 0;cursor:pointer;font-weight:700;font-size:1.2rem;color:#9e2525}ul.undefined li:hover{background-color:#ddd}ul.left-side{border-right:1px solid #444;display:inline-block;margin:0}ul.left-side li{position:relative;display:table;width:100%}ul.left-side li.added .name,ul.left-side li.added .value{opacity:.2;font-style:italic}ul.left-side li.added .upper{border-radius:0 0 100%;-webkit-box-sizing:border-box;box-sizing:border-box;height:50%;position:absolute;pointer-events:none;width:50%;top:0;right:0}ul.left-side li.added .upper.depth-1{border:2px solid #285828;border-top-width:0;border-left-width:0}ul.left-side li.added .upper.depth-2{border:2px dotted #3f9c3f;border-top-width:0;border-left-width:0}ul.left-side li.added .upper.depth-3{border:1px solid #57d657;border-top-width:0;border-left-width:0}ul.left-side li.added .upper.depth-4{border:1px dotted #57d657;border-top-width:0;border-left-width:0}ul.left-side li.added .upper.depth-5{border:1px dashed #57d657;border-top-width:0;border-left-width:0}ul.left-side li.added .lower{border-radius:0 100% 0 0;-webkit-box-sizing:border-box;box-sizing:border-box;height:50%;position:absolute;pointer-events:none;width:50%;bottom:0;right:0}ul.left-side li.added .lower.depth-1{border:2px solid #2c612c;border-bottom-width:0;border-left-width:0}ul.left-side li.added .lower.depth-2{border:2px dotted #3f9c3f;border-bottom-width:0;border-left-width:0}ul.left-side li.added .lower.depth-3{border:1px solid #57d657;border-bottom-width:0;border-left-width:0}ul.left-side li.added .lower.depth-4{border:1px dotted #57d657;border-bottom-width:0;border-left-width:0}ul.left-side li.added .lower.depth-5{border:1px dashed #57d657;border-bottom-width:0;border-left-width:0}ul.left-side li.removed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;width:66px;top:0;right:0;pointer-events:none}ul.left-side li.removed .upper:after{content:' - ';color:red;float:right;padding-right:10px;font-size:20px;line-height:16px}ul.left-side li.removed .lower{display:none}ul.left-side li.removed .tree-node span,ul.left-side li.type-changed .tree-node span{color:red}ul.left-side li.name-changed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;width:66px;top:0;right:0;pointer-events:none}ul.left-side li.name-changed .upper:after{content:' ~ ';color:#00f;font-weight:700;float:right;padding-right:10px;font-size:20px;line-height:16px}ul.left-side li.name-changed .tree-node .name{color:#00f}ul.left-side li.value-changed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;pointer-events:none;width:66px;top:0;right:0}ul.left-side li.value-changed .upper:after{content:' ~ ';color:#00f;font-weight:700;float:right;padding-right:10px;font-size:20px;line-height:16px}ul.left-side li.value-changed .tree-node .value{color:#00f}ul.right-side{border-left:1px solid #444;display:inline-block;margin:0}ul.right-side li{position:relative;display:table;width:100%}ul.right-side li.added .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;pointer-events:none;width:90%;top:0;left:0}ul.right-side li.added .upper:after{content:'+';color:#4a4;font-weight:700;padding-left:5px;font-size:20px;line-height:16px}ul.right-side li.added .lower{display:none}ul.right-side li.added .tree-node span{color:#4a4}ul.right-side li.removed .name,ul.right-side li.removed .value{-webkit-text-decoration-line:line-through;text-decoration-line:line-through;-webkit-text-decoration-color:#ff0600;text-decoration-color:#ff0600}ul.right-side li.removed .upper{border-radius:0 0 0 100%;-webkit-box-sizing:border-box;box-sizing:border-box;height:50%;width:10%;position:absolute;pointer-events:none;top:0}ul.right-side li.removed .upper.depth-1{border:2px solid #700000;border-top-width:0;border-right-width:0}ul.right-side li.removed .upper.depth-2{border:2px dotted #ca0303;border-top-width:0;border-right-width:0}ul.right-side li.removed .upper.depth-3{border:1px solid red;border-top-width:0;border-right-width:0}ul.right-side li.removed .upper.depth-4{border:1px dotted red;border-top-width:0;border-right-width:0}ul.right-side li.removed .upper.depth-5{border:1px dashed red;border-top-width:0;border-right-width:0}ul.right-side li.removed .lower{border-radius:100% 0 0;-webkit-box-sizing:border-box;box-sizing:border-box;height:50%;width:10%;position:absolute;pointer-events:none;bottom:0}ul.right-side li.removed .lower.depth-1{border:2px solid #700000;border-bottom-width:0;border-right-width:0}ul.right-side li.removed .lower.depth-2{border:2px dotted #ca0303;border-bottom-width:0;border-right-width:0}ul.right-side li.removed .lower.depth-3{border:1px solid red;border-bottom-width:0;border-right-width:0}ul.right-side li.removed .lower.depth-4{border:1px dotted red;border-bottom-width:0;border-right-width:0}ul.right-side li.removed .lower.depth-5{border:1px dashed red;border-bottom-width:0;border-right-width:0}ul.right-side li.type-changed .tree-node span{color:red}ul.right-side li.name-changed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;pointer-events:none;top:0;left:0}ul.right-side li.name-changed .upper:before{content:' ~ ';color:#00f;font-weight:700;float:right;padding-left:5px;font-size:20px;line-height:16px}ul.right-side li.name-changed .tree-node .name{color:#00f}ul.right-side li.value-changed .upper{-webkit-box-sizing:border-box;box-sizing:border-box;height:100%;position:absolute;pointer-events:none;top:0;left:0}ul.right-side li.value-changed .upper:before{content:' ~ ';color:#00f;font-weight:700;float:right;padding-left:5px;font-size:20px;line-height:16px}ul.right-side li.value-changed .tree-node .value{color:#00f}ul .tree-node{-webkit-box-sizing:border-box;box-sizing:border-box;color:#7c9eb2;display:table;padding:0;position:relative;margin:0;width:100%}ul .tree-node.depth-0{padding-left:5px}ul .tree-node.depth-1{padding-left:20px}ul .tree-node.depth-2{padding-left:40px}ul .tree-node.depth-3{padding-left:60px}ul .tree-node.depth-4{padding-left:80px}ul .tree-node.depth-5{padding-left:100px}ul .tree-node.depth-6{padding-left:120px}ul .tree-node.depth-7{padding-left:140px}ul .tree-node.depth-8{padding-left:160px}ul .tree-node.depth-9{padding-left:180px}ul .tree-node.depth-10{padding-left:200px}ul .tree-node .name{color:#444;font-weight:700}ul .tree-node .name:after{content:':'}ul .tree-node .value.string:after,ul .tree-node .value.string:before{content:'\"'}`],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"showActionButton\")\r\n  showActionButton = false;\r\n\r\n  @Input(\"status\")\r\n  status = 1;\r\n\r\n  @Input(\"side\")\r\n  side;\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  keyup(event) {\r\n    const code = event.which;\r\n    if (code === 13) {\r\n      event.target.click();\r\n\t\t}\r\n  }\r\n\r\n  undo(child) {\r\n    this.onrevert.emit(child);\r\n  }\r\n  revert(event) {\r\n    // bubble up the undo event.\r\n    this.onrevert.emit(event);\r\n  }\r\n\r\n  mouseOvered(flag, i) {\r\n    if (this.depth === 1) {\r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        side: this.side\r\n      });\r\n    }\r\n  }\r\n}\r\n",
    "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DifferentiateComponent } from './components/differentiate.component';\r\nimport { DifferentiateTree } from './components/differentiate-tree.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    DifferentiateComponent,\r\n    DifferentiateTree\r\n  ],\r\n  exports: [\r\n    DifferentiateComponent\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DifferentiateModule {}\r\n"
  ],
  "names": [
    "literal",
    "pair",
    "json",
    "array",
    "DifferentiateNodeType",
    "default",
    "typeChanged",
    "nameChanged",
    "valueChanged",
    "added",
    "removed",
    "DifferentiateNodeStatus",
    "DifferentiateComponent",
    "this",
    "allowRevert",
    "attributeOrderIsImportant",
    "onlyShowDifferences",
    "onrevert",
    "EventEmitter",
    "prototype",
    "generateNodeId",
    "Math",
    "floor",
    "random",
    "transformNodeToOriginalStructure",
    "node",
    "parent",
    "_this",
    "map",
    "item",
    "type",
    "push",
    "value",
    "name",
    "x",
    "children",
    "length",
    "transformNodeToInternalStruction",
    "result",
    "Array",
    "children_1",
    "p_1",
    "i",
    "jsonValue",
    "sort",
    "a",
    "b",
    "index",
    "altName",
    "id",
    "status",
    "Object",
    "list",
    "keys",
    "children_2",
    "p_2",
    "itemInArray",
    "side",
    "key",
    "toUpperCase",
    "leftItemFromRightItem",
    "leftNode",
    "rightNode",
    "compare",
    "counterpart",
    "unify",
    "reIndex",
    "copyInto",
    "newItem",
    "JSON",
    "parse",
    "stringify",
    "splice",
    "setChildrenStatus",
    "leftSide",
    "rightSide",
    "j",
    "looping",
    "leftItemInRightSide",
    "undefined",
    "rightItemInLeftSide",
    "toInternalStruction",
    "filterUnchanged",
    "ngOnChanges",
    "changes",
    "ngOnInit",
    "leftSideObject",
    "rightSideObject",
    "setTimeout",
    "init",
    "comparision",
    "expanded",
    "isRoot",
    "lookupChildOf",
    "foundItem",
    "revert",
    "event",
    "leftSideInfo",
    "rightSideInfo",
    "emit",
    "onhover",
    "hover",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "Input",
    "Output",
    "DifferentiateTree",
    "showActionButton",
    "level",
    "depth",
    "parseInt",
    "bubleup",
    "keyup",
    "which",
    "target",
    "click",
    "undo",
    "child",
    "mouseOvered",
    "flag",
    "DifferentiateModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents",
    "providers",
    "schemas",
    "CUSTOM_ELEMENTS_SCHEMA"
  ],
  "mappings": "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"
}
