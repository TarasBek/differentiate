{
  "version": 3,
  "file": "differentiate.umd.min.js",
  "sources": [
    "ng://differentiate/out/src/app/differentiate/components/differentiate.component.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate-tree.component.ts"
  ],
  "sourcesContent": [
    "/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  template: `<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"left-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"leftSide\"></differentiate-tree>\r\n<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"right-side\" \r\n    [showActionButton]=\"allowRevert\" \r\n    (onhover)=\"onhover($event)\"\r\n    (onrevert)=\"revert($event)\"\r\n    [children]=\"rightSide\"></differentiate-tree>\r\n\r\n`,\r\n  styles: [`:host{\n  border:1px solid #444;\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:block;\n  max-width:100vw;\n  max-height:300px;\n  overflow-y:auto;\n  position:relative;\n  width:100%; }\n`],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n\r\n  @Input(\"allowRevert\")\r\n  allowRevert = false;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToOriginalStructure(node, parent) {\r\n    let json = {};\r\n    let array = [];\r\n\r\n    node.map( (item: DifferentiateNode) => {\r\n      if (parent === DifferentiateNodeType.json) {        \r\n        if (item.type === DifferentiateNodeType.literal) {\r\n          array.push(item.value);\r\n        } else if (item.type === DifferentiateNodeType.pair) {\r\n          json[item.name] = item.value;\r\n        } else if (item.type === DifferentiateNodeType.array) {\r\n          const x = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n          if (item.name.length) {\r\n            json[item.name] = x;\r\n          } else {\r\n            json = [x];\r\n          }\r\n        } else if (item.type === DifferentiateNodeType.json) {\r\n          json[item.name] = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n        }\r\n      } else if (parent === DifferentiateNodeType.array){\r\n        if (item.type === DifferentiateNodeType.literal) {\r\n          array.push(item.value);\r\n        } else if (item.type === DifferentiateNodeType.json) {\r\n          array.push(this.transformNodeToOriginalStructure(item, item.parent));\r\n        } else if (item.type === DifferentiateNodeType.array) {\r\n          array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n        }\r\n      }\r\n    });\r\n    return array.length ? array : json;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n      leftNode.counterpart = rightNode.id;\r\n      rightNode.counterpart = leftNode.id;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n    item.counterpart = newItem.id;\r\n    newItem.counterpart = item.id;\r\n    this.setChildrenStatus(item.children, status)\r\n    this.setChildrenStatus(newItem.children, status)\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.onlyShowDifferences) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.leftSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.rightSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const comparision = this.toInternalStruction(this.leftSideObject, this.rightSideObject);\r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n    }\r\n  }\r\n  private lookupChildOf(side, id) {\r\n    let foundItem = undefined;\r\n    if (side.children.length) {\r\n      side.children.map( (item) => {\r\n        if (!foundItem) {\r\n          foundItem = this.lookupChildOf(item, id);\r\n          if (foundItem && foundItem.parent === undefined) {\r\n            foundItem.parent = side;\r\n          } else if (item.id === id) {\r\n            foundItem = {parent: side, node: item};\r\n          }\r\n        }\r\n      });\r\n    } else if (side.id === id) {\r\n      foundItem = {parent: undefined, node: side};\r\n    }\r\n    return foundItem;\r\n  }\r\n  revert(event) {\r\n    let leftSideInfo = this.lookupChildOf(this.leftSide[0], event.counterpart);\r\n    let rightSideInfo = this.lookupChildOf(this.rightSide[0], event.id);\r\n\r\n    if (event.status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (event.status === DifferentiateNodeStatus.removed) {\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (event.status === DifferentiateNodeStatus.nameChanged) {\r\n      rightSideInfo.node.name = leftSideInfo.node.name;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (event.status === DifferentiateNodeStatus.valueChanged) {\r\n      rightSideInfo.node.value = leftSideInfo.node.value;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (event.status === DifferentiateNodeStatus.typeChanged) {\r\n      rightSideInfo.node.type = leftSideInfo.node.type;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      rightSideInfo.node.children = leftSideInfo.node.children;\r\n    }\r\n    this.onrevert.emit(\r\n      this.transformNodeToOriginalStructure(\r\n        this.rightSide[0].children, \r\n        DifferentiateNodeType.json\r\n      )\r\n    );\r\n  }\r\n  onhover(event) {\r\n    let children;\r\n    if (event.side == 'left-side') {\r\n      children = this.rightSide[0].children;\r\n    } else {\r\n      children = this.leftSide[0].children;\r\n    }\r\n    if (children.length > event.index) {\r\n      children[event.index].hover = event.hover;\r\n    }\r\n  }\r\n}\r\n",
    "/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  template: `<ul [class]=\"side\">\r\n  <li  *ngFor=\"let child of children\" \r\n    (mouseout)=\"mouseOvered(false, child.index)\"\r\n    (mouseover)=\"mouseOvered(true, child.index)\"\r\n    [class.hover]=\"child.hover\"\r\n    [class.added]=\"child.status === 5\" \r\n    [class.removed]=\"child.status === 6\" \r\n    [class.type-changed]=\"child.status === 2\" \r\n    [class.name-changed]=\"child.status === 3\" \r\n    [class.value-changed]=\"child.status === 4\">\r\n    <div class='tree-node'\r\n        [ngClass]=\"'depth-' + depth\"\r\n        [id] = \"child.id\">\r\n      <span *ngIf='child.name && child.name!=null'\r\n        class='name' \r\n        [innerHTML]=\"child.name.length ? child.name : '&nbsp;'\">\r\n      </span>\r\n      <span *ngIf='child.value && child.value!=null'\r\n        class='value' \r\n        [class.string]=\"depth > 0 && child.value && child.value.length\"\r\n        [innerHTML]=\"child.value ? child.value : '&nbsp;'\">\r\n      </span>\r\n      <span title=\"Undo\"\r\n        class=\"undo\" \r\n        tabindex=\"0\"\r\n        aria-hidden=\"true\"\r\n        (keyup)=\"keyup($event)\"\r\n        (click)=\"undo(child)\"\r\n        *ngIf=\"showActionButton && status !== child.status && child.status > 1\">&#x238c;</span>\r\n    </div>\r\n    <differentiate-tree *ngIf=\"child.children.length\" \r\n        [level]=\"depth+1\" \r\n        [status]=\"child.status\" \r\n        [showActionButton]=\"showActionButton\" \r\n        (onhover)=\"bubleup($event)\"\r\n        (onrevert)=\"revert($event)\"\r\n        [class.child-node]=\"child.parent != 4\" \r\n        [children]='child.children'></differentiate-tree>\r\n    <div class=\"upper\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n    <div class=\"lower\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n  </li>\r\n</ul>\r\n\r\n`,\r\n  styles: [`:host{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:inline-block;\n  width:100%; }\n\n:host.root{\n  float:left;\n  width:50%; }\n\n:host.child-node{\n  float:left; }\n\nul{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  list-style:none;\n  padding:0;\n  width:100%; }\n  ul li .hover{\n    background-color:#ddd; }\n  ul li .tree-node{\n    position:relative; }\n    ul li .tree-node .undo{\n      position:absolute;\n      width:18px;\n      height:18px;\n      right:0;\n      margin:0 5px 0 0;\n      cursor:pointer;\n      font-weight:bold;\n      font-size:1.2rem;\n      color:#9e2525; }\n  ul.undefined li:hover{\n    background-color:#ddd; }\n  ul.left-side{\n    border-right:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.left-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.left-side li.added .name, ul.left-side li.added .value{\n        opacity:0.2;\n        font-style:italic; }\n      ul.left-side li.added .upper{\n        border-radius:0 0 100% 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        top:0;\n        right:0; }\n        ul.left-side li.added .upper.depth-1{\n          border:2px solid #285828;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-2{\n          border:2px dotted #3f9c3f;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-3{\n          border:1px solid #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-4{\n          border:1px dotted #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-5{\n          border:1px dashed #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n      ul.left-side li.added .lower{\n        border-radius:0 100% 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        bottom:0;\n        right:0; }\n        ul.left-side li.added .lower.depth-1{\n          border:2px solid #2c612c;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-2{\n          border:2px dotted #3f9c3f;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-3{\n          border:1px solid #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-4{\n          border:1px dotted #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-5{\n          border:1px dashed #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n      ul.left-side li.removed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.removed .upper:after{\n          content:' - ';\n          color:#f00;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.removed .lower{\n        display:none; }\n      ul.left-side li.removed .tree-node span{\n        color:#f00; }\n      ul.left-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.left-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.name-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.left-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:66px;\n        top:0;\n        right:0; }\n        ul.left-side li.value-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul.right-side{\n    border-left:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.right-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.right-side li.added .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:90%;\n        top:0;\n        left:0; }\n        ul.right-side li.added .upper:after{\n          content:'+';\n          color:#4a4;\n          font-weight:bold;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.added .lower{\n        display:none; }\n      ul.right-side li.added .tree-node span{\n        color:#4a4; }\n      ul.right-side li.removed .name, ul.right-side li.removed .value{\n        -webkit-text-decoration-line:line-through;\n                text-decoration-line:line-through;\n        -webkit-text-decoration-color:#ff0600;\n                text-decoration-color:#ff0600; }\n      ul.right-side li.removed .upper{\n        border-radius:0 0 0 100%;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        top:0; }\n        ul.right-side li.removed .upper.depth-1{\n          border:2px solid #700000;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-2{\n          border:2px dotted #ca0303;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-3{\n          border:1px solid #f00;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-4{\n          border:1px dotted #f00;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-5{\n          border:1px dashed #f00;\n          border-top-width:0;\n          border-right-width:0; }\n      ul.right-side li.removed .lower{\n        border-radius:100% 0 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        bottom:0; }\n        ul.right-side li.removed .lower.depth-1{\n          border:2px solid #700000;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-2{\n          border:2px dotted #ca0303;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-3{\n          border:1px solid #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-4{\n          border:1px dotted #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-5{\n          border:1px dashed #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n      ul.right-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.right-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.name-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.right-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.value-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul .tree-node{\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    color:#7c9eb2;\n    display:table;\n    padding:0;\n    position:relative;\n    margin:0;\n    width:100%; }\n    ul .tree-node.depth-0{\n      padding-left:5px; }\n    ul .tree-node.depth-1{\n      padding-left:20px; }\n    ul .tree-node.depth-2{\n      padding-left:40px; }\n    ul .tree-node.depth-3{\n      padding-left:60px; }\n    ul .tree-node.depth-4{\n      padding-left:80px; }\n    ul .tree-node.depth-5{\n      padding-left:100px; }\n    ul .tree-node.depth-6{\n      padding-left:120px; }\n    ul .tree-node.depth-7{\n      padding-left:140px; }\n    ul .tree-node.depth-8{\n      padding-left:160px; }\n    ul .tree-node.depth-9{\n      padding-left:180px; }\n    ul .tree-node.depth-10{\n      padding-left:200px; }\n    ul .tree-node .name{\n      color:#444;\n      font-weight:bold; }\n      ul .tree-node .name:after{\n        content:':'; }\n    ul .tree-node .value.string:before{\n      content:'\"'; }\n    ul .tree-node .value.string:after{\n      content:'\"'; }\n`],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"showActionButton\")\r\n  showActionButton = false;\r\n\r\n  @Input(\"status\")\r\n  status = 1;\r\n\r\n  @Input(\"side\")\r\n  side;\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  keyup(event) {\r\n    const code = event.which;\r\n    if (code === 13) {\r\n      event.target.click();\r\n\t\t}\r\n  }\r\n\r\n  undo(child) {\r\n    this.onrevert.emit(child);\r\n  }\r\n  revert(event) {\r\n    // bubble up the undo event.\r\n    this.onrevert.emit(event);\r\n  }\r\n\r\n  mouseOvered(flag, i) {\r\n    if (this.depth === 1) {\r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        side: this.side\r\n      });\r\n    }\r\n  }\r\n}\r\n"
  ],
  "names": [
    "this",
    "allowRevert",
    "attributeOrderIsImportant",
    "onlyShowDifferences",
    "onrevert",
    "EventEmitter",
    "Math",
    "floor",
    "random",
    "json",
    "array",
    "node",
    "map",
    "item",
    "parent",
    "DifferentiateNodeType",
    "type",
    "literal",
    "push",
    "value",
    "pair",
    "name",
    "x",
    "_this",
    "transformNodeToOriginalStructure",
    "children",
    "length",
    "result",
    "Array",
    "children_1",
    "p_1",
    "i",
    "jsonValue",
    "transformNodeToInternalStruction",
    "sort",
    "a",
    "b",
    "index",
    "altName",
    "id",
    "generateNodeId",
    "status",
    "DifferentiateNodeStatus",
    "default",
    "Object",
    "list",
    "keys",
    "children_2",
    "p_2",
    "DifferentiateComponent",
    "prototype",
    "itemInArray",
    "side",
    "key",
    "toUpperCase",
    "leftItemFromRightItem",
    "leftNode",
    "rightNode",
    "compare",
    "typeChanged",
    "counterpart",
    "valueChanged",
    "nameChanged",
    "unify",
    "reIndex",
    "copyInto",
    "newItem",
    "JSON",
    "parse",
    "stringify",
    "splice",
    "setChildrenStatus",
    "leftSide",
    "rightSide",
    "j",
    "looping",
    "leftItemInRightSide",
    "undefined",
    "rightItemInLeftSide",
    "removed",
    "added",
    "toInternalStruction",
    "filterUnchanged",
    "ngOnChanges",
    "changes",
    "ngOnInit",
    "leftSideObject",
    "rightSideObject",
    "comparision",
    "expanded",
    "isRoot",
    "lookupChildOf",
    "foundItem",
    "revert",
    "event",
    "leftSideInfo",
    "rightSideInfo",
    "onhover",
    "Input",
    "args",
    "showActionButton",
    "DifferentiateTree",
    "depth",
    "parseInt",
    "level",
    "emit",
    "keyup",
    "decorators",
    "selector",
    "template",
    "propDecorators",
    "Output",
    "DifferentiateModule"
  ],
  "mappings": "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"
}
