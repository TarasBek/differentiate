{
  "version": 3,
  "file": "differentiate.umd.js",
  "sources": [
    "ng://differentiate/out/src/app/differentiate/components/differentiate-tree.component.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate.component.ts"
  ],
  "sourcesContent": [
    "/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  template: `<ul [class]=\"side\">\r\n  <li  *ngFor=\"let child of children\" \r\n    (mouseout)=\"mouseOvered(false, child.index)\"\r\n    (mouseover)=\"mouseOvered(true, child.index)\"\r\n    [class.hover]=\"child.hover\"\r\n    [class.added]=\"child.status === 5\" \r\n    [class.removed]=\"child.status === 6\" \r\n    [class.type-changed]=\"child.status === 2\" \r\n    [class.name-changed]=\"child.status === 3\" \r\n    [class.value-changed]=\"child.status === 4\">\r\n    <div class='tree-node'\r\n        [ngClass]=\"'depth-' + depth\"\r\n        [id] = \"child.id\">\r\n      <span *ngIf='child.name && child.name!=null'\r\n        class='name' \r\n        [innerHTML]=\"child.name.length ? child.name : '&nbsp;'\">\r\n      </span>\r\n      <span *ngIf='child.value && child.value!=null'\r\n        class='value' \r\n        [class.string]=\"depth > 0 && child.value && child.value.length\"\r\n        [innerHTML]=\"child.value ? child.value : '&nbsp;'\">\r\n      </span>\r\n    </div>\r\n    <differentiate-tree *ngIf=\"child.children.length\" \r\n        [level]=\"depth+1\" \r\n        (onhover)=\"bubleup($event)\"\r\n        [class.child-node]=\"child.parent != 4\" \r\n        [children]='child.children'></differentiate-tree>\r\n    <div class=\"upper\" *ngIf=\"child.status > 2\"></div>\r\n    <div class=\"lower\" *ngIf=\"child.status > 2\"></div>\r\n  </li>\r\n</ul>\r\n\r\n`,\r\n  styles: [`:host{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:inline-block;\n  width:100%; }\n\n:host.root{\n  float:left;\n  width:50%; }\n\n:host.child-node{\n  float:left; }\n\nul{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  list-style:none;\n  padding:0;\n  width:100%; }\n  ul li .hover{\n    background-color:#ddd; }\n  ul.undefined li:hover{\n    background-color:#ddd; }\n  ul.left-side{\n    border-right:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.left-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.left-side li.added .name, ul.left-side li.added .value{\n        opacity:0.2;\n        font-style:italic; }\n      ul.left-side li.added .upper{\n        border:1px solid #4a4;\n        border-top-width:0;\n        border-left-width:0;\n        border-radius:0 0 100% 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        top:0;\n        right:0; }\n      ul.left-side li.added .lower{\n        border:1px solid #4a4;\n        border-bottom-width:0;\n        border-left-width:0;\n        border-radius:0 100% 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        bottom:0;\n        right:0; }\n      ul.left-side li.removed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.removed .upper:after{\n          content:' - ';\n          color:#f00;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.removed .lower{\n        display:none; }\n      ul.left-side li.removed .tree-node span{\n        color:#f00; }\n      ul.left-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.left-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.name-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.left-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:66px;\n        top:0;\n        right:0; }\n        ul.left-side li.value-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul.right-side{\n    border-left:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.right-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.right-side li.added .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:90%;\n        top:0;\n        left:0; }\n        ul.right-side li.added .upper:after{\n          content:'+';\n          color:#4a4;\n          font-weight:bold;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.added .lower{\n        display:none; }\n      ul.right-side li.added .tree-node span{\n        color:#4a4; }\n      ul.right-side li.removed .name, ul.right-side li.removed .value{\n        -webkit-text-decoration-line:line-through;\n                text-decoration-line:line-through;\n        -webkit-text-decoration-color:#ff0600;\n                text-decoration-color:#ff0600; }\n      ul.right-side li.removed .upper{\n        border:1px solid #f00;\n        border-top-width:0;\n        border-right-width:0;\n        border-radius:0 0 0 100%;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        top:0; }\n      ul.right-side li.removed .lower{\n        border:1px solid #f00;\n        border-bottom-width:0;\n        border-right-width:0;\n        border-radius:100% 0 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        bottom:0; }\n      ul.right-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.right-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.name-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.right-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.value-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul .tree-node{\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    color:#7c9eb2;\n    display:table;\n    padding:0;\n    position:relative;\n    margin:0;\n    width:100%; }\n    ul .tree-node.depth-0{\n      padding-left:5px; }\n    ul .tree-node.depth-1{\n      padding-left:20px; }\n    ul .tree-node.depth-2{\n      padding-left:40px; }\n    ul .tree-node.depth-3{\n      padding-left:60px; }\n    ul .tree-node.depth-4{\n      padding-left:80px; }\n    ul .tree-node.depth-5{\n      padding-left:100px; }\n    ul .tree-node.depth-6{\n      padding-left:120px; }\n    ul .tree-node.depth-7{\n      padding-left:140px; }\n    ul .tree-node.depth-8{\n      padding-left:160px; }\n    ul .tree-node.depth-9{\n      padding-left:180px; }\n    ul .tree-node.depth-10{\n      padding-left:200px; }\n    ul .tree-node .name{\n      color:#444;\n      font-weight:bold; }\n      ul .tree-node .name:after{\n        content:':'; }\n    ul .tree-node .value.string:before{\n      content:'\"'; }\n    ul .tree-node .value.string:after{\n      content:'\"'; }\n`],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"side\")\r\n  side;\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  mouseOvered(flag, i) {\r\n    if (this.depth === 1) {\r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        side: this.side\r\n      });\r\n    }\r\n  }\r\n}\r\n",
    "/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  template: `<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"left-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"leftSide\"></differentiate-tree>\r\n<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"right-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"rightSide\"></differentiate-tree>\r\n\r\n`,\r\n  styles: [`:host{\n  border:1px solid #444;\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:block;\n  max-width:100vw;\n  max-height:300px;\n  overflow-y:auto;\n  position:relative;\n  width:100%; }\n`],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            value: \"\",\r\n            parent: DifferentiateNodeType.array,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            value: jsonValue,\r\n            parent: DifferentiateNodeType.array,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            value: \"\",\r\n            parent: DifferentiateNodeType.json,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            value: jsonValue,\r\n            parent: DifferentiateNodeType.json,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n            leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n            rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n            leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n            rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n            leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n            rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n      } else {\r\n        this.unify(leftNode.children, rightNode.children);\r\n      }\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length && j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n  \r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.leftSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.rightSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const comparision = this.toInternalStruction(this.leftSideObject, this.rightSideObject);\r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n    }\r\n  }\r\n  onhover(event) {\r\n    if (event.side == 'left-side') {\r\n      this.rightSide[0].children[event.index].hover = event.hover;\r\n    } else {\r\n      this.leftSide[0].children[event.index].hover = event.hover;\r\n    }\r\n  }\r\n}\r\n"
  ],
  "names": [
    "Input",
    "Component"
  ],
  "mappings": "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"
}
