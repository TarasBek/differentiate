{"version":3,"file":"differentiate.umd.js.map","sources":["ng://differentiate/src/app/differentiate/interfaces/differentiate.interfaces.ts","ng://differentiate/src/app/differentiate/components/differentiate.component.ts","ng://differentiate/src/app/differentiate/components/differentiate-tree.component.ts","ng://differentiate/src/app/differentiate/differentiate.module.ts"],"sourcesContent":["\r\nexport enum DifferentiateNodeType {\r\n  literal = 1,\r\n  pair = 2,\r\n  json = 3,\r\n  array = 4\r\n}\r\nexport enum DifferentiateNodeStatus {\r\n  default = 1,\r\n  typeChanged = 2,\r\n  nameChanged = 3,\r\n  valueChanged = 4,\r\n  added = 5,\r\n  removed = 6\r\n}\r\nexport interface DifferentiateNode {\r\n  id: number,\r\n  counterpart?: number,\r\n  index: number,\r\n  name: string,\r\n  altName: string,\r\n  value: string,\r\n  parent: DifferentiateNodeType,\r\n  type: DifferentiateNodeType,\r\n  children: DifferentiateNode[],\r\n  status: DifferentiateNodeStatus,\r\n  isRoot?: boolean\r\n}\r\n\r\n","/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\nimport { ThrowStmt } from '@angular/compiler';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  templateUrl: './differentiate.component.html',\r\n  styleUrls: ['./differentiate.component.scss'],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n  ready: boolean;\r\n  categorizeBy: string[];\r\n\r\n  @Input(\"allowRevert\")\r\n  allowRevert = false;\r\n\r\n  @Input(\"allowAdvance\")\r\n  allowAdvance = false;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Input('namedRootObject')\r\n  set namedRootObject(value: string) {\r\n    let x = value.replace(\" \", \"\");\r\n\r\n    if (x.length) {\r\n      this.categorizeBy = value.split(\",\");\r\n    } else {\r\n      this.categorizeBy = undefined;\r\n    }\r\n  }\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onadvance\")\r\n  onadvance = new EventEmitter();\r\n\r\n  @Output(\"ondifference\")\r\n  ondifference = new EventEmitter();\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToOriginalStructure(node, parent) {\r\n    let json = {};\r\n    let array = [];\r\n\r\n    node.map( (item: DifferentiateNode) => {\r\n      if (item.status !== DifferentiateNodeStatus.removed) {\r\n        if (parent === DifferentiateNodeType.json) {    \r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.pair) {\r\n            json[item.name] = item.value;\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            const x = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n            if (item.name.length) {\r\n              json[item.name] = x;\r\n            } else {\r\n              json = [x];\r\n            }\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            json[item.name] = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n          }\r\n        } else if (parent === DifferentiateNodeType.array){\r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            array.push(this.transformNodeToOriginalStructure(item, item.parent));\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return array.length ? array : json;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n      leftNode.counterpart = rightNode.id;\r\n      rightNode.counterpart = leftNode.id;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n    item.counterpart = newItem.id;\r\n    newItem.counterpart = item.id;\r\n    this.setChildrenStatus(item.children, status)\r\n    this.setChildrenStatus(newItem.children, status)\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant ||\r\n      changes.onlyShowDifferences ||\r\n      changes.leftSideObject ||\r\n      changes.namedRootObject ||\r\n      changes.rightSideObject) {\r\n      this.ready = false;\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    setTimeout(()=>this.init(),666);\r\n  }\r\n  private categorizedName(item) {\r\n    let name = \"\";\r\n    this.categorizeBy.map((category) => {\r\n      if (item.name === category) {\r\n        name = item.value;\r\n      }\r\n    });\r\n    return name;\r\n  }\r\n  private sideCategorizedName(side) {\r\n    side.map( (item) => {\r\n      const names = [];\r\n      item.children.map((child) => {\r\n        const name = this.categorizedName(child);\r\n        if(String(name).length) {\r\n          names.push(name);\r\n        }\r\n      });\r\n      item.categorizeBy = names.length > 1 ? names.join(\" - \") : names[0];\r\n      item.collapsed = true;\r\n    });\r\n  }\r\n  private init() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const left = (this.leftSideObject instanceof Array)  ? this.leftSideObject : [this.leftSideObject]\r\n      const right = (this.rightSideObject instanceof Array)  ? this.rightSideObject : [this.rightSideObject]\r\n      const comparision = this.toInternalStruction(left, right);\r\n      if (this.categorizeBy) {\r\n        this.sideCategorizedName(comparision.leftSide);\r\n        this.sideCategorizedName(comparision.rightSide);\r\n      }  \r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n      setTimeout(()=>{\r\n        this.ready = true;\r\n        this.fireCountDifference();\r\n      },333);\r\n    }\r\n  }\r\n  private fireCountDifference() {\r\n    let count = 0;\r\n    this.leftSide[0].children.map( (listItem) => {\r\n      listItem.children.map( (item) => {\r\n        if(item.status !== DifferentiateNodeStatus.default) {\r\n          count++;\r\n        }\r\n      });\r\n    })\r\n    this.ondifference.emit(count);\r\n  }\r\n  private lookupChildOf(side, parentObject, id) {\r\n    let foundItem = undefined;\r\n    if (side.id === id) {\r\n      foundItem = {parent: parentObject, node: side};\r\n    } else if (side.children.length) {\r\n      side.children.map( (item) => {\r\n        if (!foundItem) {\r\n          foundItem = this.lookupChildOf(item, undefined, id);\r\n          if (foundItem && foundItem.parent === undefined) {\r\n            foundItem.parent = side;\r\n          } else if (item.id === id) {\r\n            foundItem = {parent: side, node: item};\r\n          }\r\n        }\r\n      });\r\n    } \r\n    return foundItem;\r\n  }\r\n  private performAdvanceToRight(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.leftSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      leftSideInfo.node.name = rightSideInfo.node.name;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      rightSideInfo.node.value = leftSideInfo.node.value;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      leftSideInfo.node.type = rightSideInfo.node.type;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      leftSideInfo.node.children = rightSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onadvance.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  private performAdvanceToLeft(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.rightSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      rightSideInfo.node.name = leftSideInfo.node.name;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      leftSideInfo.node.value = rightSideInfo.node.value;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      rightSideInfo.node.type = leftSideInfo.node.type;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      rightSideInfo.node.children = leftSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onrevert.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  advance(event) {\r\n    const index = parseInt(event.node.path.split(\",\")[1]);\r\n\r\n    if (event.type === 'advance') {\r\n      this.performAdvanceToLeft(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.id), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.counterpart), \r\n        event.node.status, index);\r\n    } else {\r\n      this.performAdvanceToRight(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.counterpart), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.id), \r\n        event.node.status, index);\r\n    }\r\n  }\r\n  autoExpand(event) {\r\n    const index = parseInt(event.split(\",\")[1]);\r\n    const lc = this.rightSide[0].children[index];\r\n    const rc = this.leftSide[0].children[index];\r\n    \r\n    lc.collapsed = !lc.collapsed;\r\n    rc.collapsed = !rc.collapsed;\r\n  }\r\n  onhover(event) {\r\n    const index = parseInt(event.path.split(\",\")[1]);\r\n\r\n    this.rightSide[0].children[index].children[event.index].hover = event.hover;\r\n    this.leftSide[0].children[index].children[event.index].hover = event.hover;\r\n  }\r\n}\r\n","/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {DifferentiateNodeStatus} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  templateUrl: './differentiate-tree.component.html',\r\n  styleUrls: ['./differentiate-tree.component.scss'],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Input(\"collapsed\")\r\n  collapsed = true;\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"showLeftActionButton\")\r\n  showLeftActionButton = false;\r\n\r\n  @Input(\"showRightActionButton\")\r\n  showRightActionButton = false;\r\n\r\n  @Input(\"status\")\r\n  status = 1;\r\n\r\n  @Input(\"side\")\r\n  side = \"\";\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  @Input(\"objectPath\")\r\n  objectPath = \"\";\r\n\r\n  @Input(\"categorizeBy\")\r\n  categorizeBy: string;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onexpand\")\r\n  onexpand = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  keyup(event) {\r\n    const code = event.which;\r\n    if (code === 13) {\r\n      event.target.click();\r\n\t\t}\r\n  }\r\n\r\n  changCounter() {\r\n    let count = 0;\r\n    this.children.map( (item) => {\r\n      if(item.status !== DifferentiateNodeStatus.default) {\r\n        count++;\r\n      }\r\n    })\r\n    return count;\r\n  }\r\n\r\n  expand(event) {\r\n    this.onexpand.emit( this.objectPath );\r\n  }\r\n  autoExpand(event) {\r\n    this.onexpand.emit(event);\r\n  }\r\n  advanceToRightSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"advance\", node: child});\r\n  }\r\n  advanceToLeftSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"revert\", node: child});\r\n  }\r\n  advance(event) {\r\n    // bubble up the undo event.\r\n    this.onrevert.emit(event);\r\n  }\r\n\r\n  mouseOvered(event, flag, i) {\r\n    event.preventDefault();\r\n\r\n    if (this.depth === 2) {\r\n      event.stopPropagation();\r\n      \r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        path: this.objectPath\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DifferentiateComponent } from './components/differentiate.component';\r\nimport { DifferentiateTree } from './components/differentiate-tree.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    DifferentiateComponent,\r\n    DifferentiateTree\r\n  ],\r\n  exports: [\r\n    DifferentiateComponent\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DifferentiateModule {}\r\n"],"names":["EventEmitter","Component","Input","Output","NgModule","CommonModule","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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"}
