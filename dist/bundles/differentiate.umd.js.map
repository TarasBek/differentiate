{
  "version": 3,
  "file": "differentiate.umd.js",
  "sources": [
    "ng://differentiate/out/src/app/differentiate/components/differentiate-tree.component.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate.component.ts"
  ],
  "sourcesContent": [
    "/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  template: `<ul [class]=\"side\">\r\n  <li  *ngFor=\"let child of children\" \r\n    (mouseout)=\"mouseOvered(false, child.index)\"\r\n    (mouseover)=\"mouseOvered(true, child.index)\"\r\n    [class.hover]=\"child.hover\"\r\n    [class.added]=\"child.status === 5\" \r\n    [class.removed]=\"child.status === 6\" \r\n    [class.type-changed]=\"child.status === 2\" \r\n    [class.name-changed]=\"child.status === 3\" \r\n    [class.value-changed]=\"child.status === 4\">\r\n    <div class='tree-node'\r\n        [ngClass]=\"'depth-' + depth\"\r\n        [id] = \"child.id\">\r\n      <span *ngIf='child.name && child.name!=null'\r\n        class='name' \r\n        [innerHTML]=\"child.name.length ? child.name : '&nbsp;'\">\r\n      </span>\r\n      <span *ngIf='child.value && child.value!=null'\r\n        class='value' \r\n        [class.string]=\"depth > 0 && child.value && child.value.length\"\r\n        [innerHTML]=\"child.value ? child.value : '&nbsp;'\">\r\n      </span>\r\n      <span title=\"Undo\"\r\n        class=\"undo\" \r\n        tabindex=\"0\"\r\n        aria-hidden=\"true\"\r\n        (keyup)=\"keyup($event)\"\r\n        (click)=\"undo(child)\"\r\n        *ngIf=\"showActionButton && status !== child.status && child.status > 1\">&#x238c;</span>\r\n    </div>\r\n    <differentiate-tree *ngIf=\"child.children.length\" \r\n        [level]=\"depth+1\" \r\n        [status]=\"child.status\" \r\n        [showActionButton]=\"showActionButton\" \r\n        (onhover)=\"bubleup($event)\"\r\n        (onrevert)=\"revert($event)\"\r\n        [class.child-node]=\"child.parent != 4\" \r\n        [children]='child.children'></differentiate-tree>\r\n    <div class=\"upper\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n    <div class=\"lower\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n  </li>\r\n</ul>\r\n\r\n`,\r\n  styles: [`:host{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:inline-block;\n  width:100%; }\n\n:host.root{\n  float:left;\n  width:50%; }\n\n:host.child-node{\n  float:left; }\n\nul{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  list-style:none;\n  padding:0;\n  width:100%; }\n  ul li .hover{\n    background-color:#ddd; }\n  ul li .tree-node{\n    position:relative; }\n    ul li .tree-node .undo{\n      position:absolute;\n      width:18px;\n      height:18px;\n      right:0;\n      margin:0 5px 0 0;\n      cursor:pointer;\n      font-weight:bold;\n      font-size:1.2rem;\n      color:#9e2525; }\n  ul.undefined li:hover{\n    background-color:#ddd; }\n  ul.left-side{\n    border-right:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.left-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.left-side li.added .name, ul.left-side li.added .value{\n        opacity:0.2;\n        font-style:italic; }\n      ul.left-side li.added .upper{\n        border-radius:0 0 100% 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        top:0;\n        right:0; }\n        ul.left-side li.added .upper.depth-1{\n          border:2px solid #285828;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-2{\n          border:2px dotted #3f9c3f;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-3{\n          border:1px solid #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-4{\n          border:1px dotted #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-5{\n          border:1px dashed #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n      ul.left-side li.added .lower{\n        border-radius:0 100% 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        bottom:0;\n        right:0; }\n        ul.left-side li.added .lower.depth-1{\n          border:2px solid #2c612c;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-2{\n          border:2px dotted #3f9c3f;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-3{\n          border:1px solid #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-4{\n          border:1px dotted #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-5{\n          border:1px dashed #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n      ul.left-side li.removed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.removed .upper:after{\n          content:' - ';\n          color:#f00;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.removed .lower{\n        display:none; }\n      ul.left-side li.removed .tree-node span{\n        color:#f00; }\n      ul.left-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.left-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.name-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.left-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:66px;\n        top:0;\n        right:0; }\n        ul.left-side li.value-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul.right-side{\n    border-left:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.right-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.right-side li.added .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:90%;\n        top:0;\n        left:0; }\n        ul.right-side li.added .upper:after{\n          content:'+';\n          color:#4a4;\n          font-weight:bold;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.added .lower{\n        display:none; }\n      ul.right-side li.added .tree-node span{\n        color:#4a4; }\n      ul.right-side li.removed .name, ul.right-side li.removed .value{\n        -webkit-text-decoration-line:line-through;\n                text-decoration-line:line-through;\n        -webkit-text-decoration-color:#ff0600;\n                text-decoration-color:#ff0600; }\n      ul.right-side li.removed .upper{\n        border-radius:0 0 0 100%;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        top:0; }\n        ul.right-side li.removed .upper.depth-1{\n          border:2px solid #700000;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-2{\n          border:2px dotted #ca0303;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-3{\n          border:1px solid #f00;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-4{\n          border:1px dotted #f00;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-5{\n          border:1px dashed #f00;\n          border-top-width:0;\n          border-right-width:0; }\n      ul.right-side li.removed .lower{\n        border-radius:100% 0 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        bottom:0; }\n        ul.right-side li.removed .lower.depth-1{\n          border:2px solid #700000;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-2{\n          border:2px dotted #ca0303;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-3{\n          border:1px solid #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-4{\n          border:1px dotted #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-5{\n          border:1px dashed #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n      ul.right-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.right-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.name-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.right-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.value-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul .tree-node{\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    color:#7c9eb2;\n    display:table;\n    padding:0;\n    position:relative;\n    margin:0;\n    width:100%; }\n    ul .tree-node.depth-0{\n      padding-left:5px; }\n    ul .tree-node.depth-1{\n      padding-left:20px; }\n    ul .tree-node.depth-2{\n      padding-left:40px; }\n    ul .tree-node.depth-3{\n      padding-left:60px; }\n    ul .tree-node.depth-4{\n      padding-left:80px; }\n    ul .tree-node.depth-5{\n      padding-left:100px; }\n    ul .tree-node.depth-6{\n      padding-left:120px; }\n    ul .tree-node.depth-7{\n      padding-left:140px; }\n    ul .tree-node.depth-8{\n      padding-left:160px; }\n    ul .tree-node.depth-9{\n      padding-left:180px; }\n    ul .tree-node.depth-10{\n      padding-left:200px; }\n    ul .tree-node .name{\n      color:#444;\n      font-weight:bold; }\n      ul .tree-node .name:after{\n        content:':'; }\n    ul .tree-node .value.string:before{\n      content:'\"'; }\n    ul .tree-node .value.string:after{\n      content:'\"'; }\n`],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"showActionButton\")\r\n  showActionButton = false;\r\n\r\n  @Input(\"status\")\r\n  status = 1;\r\n\r\n  @Input(\"side\")\r\n  side;\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  keyup(event) {\r\n    const code = event.which;\r\n    if (code === 13) {\r\n      event.target.click();\r\n\t\t}\r\n  }\r\n\r\n  undo(child) {\r\n    this.onrevert.emit(child);\r\n  }\r\n  revert(event) {\r\n    // bubble up the undo event.\r\n    this.onrevert.emit(event);\r\n  }\r\n\r\n  mouseOvered(flag, i) {\r\n    if (this.depth === 1) {\r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        side: this.side\r\n      });\r\n    }\r\n  }\r\n}\r\n",
    "/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  template: `<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"left-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"leftSide\"></differentiate-tree>\r\n<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"right-side\" \r\n    [showActionButton]=\"allowRevert\" \r\n    (onhover)=\"onhover($event)\"\r\n    (onrevert)=\"revert($event)\"\r\n    [children]=\"rightSide\"></differentiate-tree>\r\n\r\n`,\r\n  styles: [`:host{\n  border:1px solid #444;\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:block;\n  max-width:100vw;\n  max-height:300px;\n  overflow-y:auto;\n  position:relative;\n  width:100%; }\n`],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n\r\n  @Input(\"allowRevert\")\r\n  allowRevert = false;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToOriginalStructure(node, parent) {\r\n    let json = {};\r\n    let array = [];\r\n\r\n    node.map( (item: DifferentiateNode) => {\r\n      if (parent === DifferentiateNodeType.json) {        \r\n        if (item.type === DifferentiateNodeType.literal) {\r\n          array.push(item.value);\r\n        } else if (item.type === DifferentiateNodeType.pair) {\r\n          json[item.name] = item.value;\r\n        } else if (item.type === DifferentiateNodeType.array) {\r\n          const x = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n          if (item.name.length) {\r\n            json[item.name] = x;\r\n          } else {\r\n            json = [x];\r\n          }\r\n        } else if (item.type === DifferentiateNodeType.json) {\r\n          json[item.name] = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n        }\r\n      } else if (parent === DifferentiateNodeType.array){\r\n        if (item.type === DifferentiateNodeType.literal) {\r\n          array.push(item.value);\r\n        } else if (item.type === DifferentiateNodeType.json) {\r\n          array.push(this.transformNodeToOriginalStructure(item, item.parent));\r\n        } else if (item.type === DifferentiateNodeType.array) {\r\n          array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n        }\r\n      }\r\n    });\r\n    return array.length ? array : json;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n      leftNode.counterpart = rightNode.id;\r\n      rightNode.counterpart = leftNode.id;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n    item.counterpart = newItem.id;\r\n    newItem.counterpart = item.id;\r\n    this.setChildrenStatus(item.children, status)\r\n    this.setChildrenStatus(newItem.children, status)\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.onlyShowDifferences) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.leftSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.rightSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const comparision = this.toInternalStruction(this.leftSideObject, this.rightSideObject);\r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n    }\r\n  }\r\n  private lookupChildOf(side, id) {\r\n    let foundItem = undefined;\r\n    if (side.children.length) {\r\n      side.children.map( (item) => {\r\n        if (!foundItem) {\r\n          foundItem = this.lookupChildOf(item, id);\r\n          if (foundItem && foundItem.parent === undefined) {\r\n            foundItem.parent = side;\r\n          } else if (item.id === id) {\r\n            foundItem = {parent: side, node: item};\r\n          }\r\n        }\r\n      });\r\n    } else if (side.id === id) {\r\n      foundItem = {parent: undefined, node: side};\r\n    }\r\n    return foundItem;\r\n  }\r\n  revert(event) {\r\n    let leftSideInfo = this.lookupChildOf(this.leftSide[0], event.counterpart);\r\n    let rightSideInfo = this.lookupChildOf(this.rightSide[0], event.id);\r\n\r\n    if (event.status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (event.status === DifferentiateNodeStatus.removed) {\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (event.status === DifferentiateNodeStatus.nameChanged) {\r\n      rightSideInfo.node.name = leftSideInfo.node.name;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (event.status === DifferentiateNodeStatus.valueChanged) {\r\n      rightSideInfo.node.value = leftSideInfo.node.value;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (event.status === DifferentiateNodeStatus.typeChanged) {\r\n      rightSideInfo.node.type = leftSideInfo.node.type;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      rightSideInfo.node.children = leftSideInfo.node.children;\r\n    }\r\n    this.onrevert.emit(\r\n      this.transformNodeToOriginalStructure(\r\n        this.rightSide[0].children, \r\n        DifferentiateNodeType.json\r\n      )\r\n    );\r\n  }\r\n  onhover(event) {\r\n    let children;\r\n    if (event.side == 'left-side') {\r\n      children = this.rightSide[0].children;\r\n    } else {\r\n      children = this.leftSide[0].children;\r\n    }\r\n    if (children.length > event.index) {\r\n      children[event.index].hover = event.hover;\r\n    }\r\n  }\r\n}\r\n"
  ],
  "names": [
    "Output",
    "Input",
    "EventEmitter"
  ],
  "mappings": "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"
}
