{
  "version": 3,
  "file": "differentiate.umd.js",
  "sources": [
    "ng://differentiate/out/src/app/differentiate/components/differentiate-tree.component.ts",
    "ng://differentiate/out/src/app/differentiate/components/differentiate.component.ts"
  ],
  "sourcesContent": [
    "/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  template: `<ul [class]=\"side\">\r\n  <li  *ngFor=\"let child of children\" \r\n    (mouseout)=\"mouseOvered(false, child.index)\"\r\n    (mouseover)=\"mouseOvered(true, child.index)\"\r\n    [class.hover]=\"child.hover\"\r\n    [class.added]=\"child.status === 5\" \r\n    [class.removed]=\"child.status === 6\" \r\n    [class.type-changed]=\"child.status === 2\" \r\n    [class.name-changed]=\"child.status === 3\" \r\n    [class.value-changed]=\"child.status === 4\">\r\n    <div class='tree-node'\r\n        [ngClass]=\"'depth-' + depth\"\r\n        [id] = \"child.id\">\r\n      <span *ngIf='child.name && child.name!=null'\r\n        class='name' \r\n        [innerHTML]=\"child.name.length ? child.name : '&nbsp;'\">\r\n      </span>\r\n      <span *ngIf='child.value && child.value!=null'\r\n        class='value' \r\n        [class.string]=\"depth > 0 && child.value && child.value.length\"\r\n        [innerHTML]=\"child.value ? child.value : '&nbsp;'\">\r\n      </span>\r\n    </div>\r\n    <differentiate-tree *ngIf=\"child.children.length\" \r\n        [level]=\"depth+1\" \r\n        (onhover)=\"bubleup($event)\"\r\n        [class.child-node]=\"child.parent != 4\" \r\n        [children]='child.children'></differentiate-tree>\r\n    <div class=\"upper\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n    <div class=\"lower\" [ngClass]=\"'depth-' + depth\" *ngIf=\"child.status > 2\"></div>\r\n  </li>\r\n</ul>\r\n\r\n`,\r\n  styles: [`:host{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:inline-block;\n  width:100%; }\n\n:host.root{\n  float:left;\n  width:50%; }\n\n:host.child-node{\n  float:left; }\n\nul{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  list-style:none;\n  padding:0;\n  width:100%; }\n  ul li .hover{\n    background-color:#ddd; }\n  ul.undefined li:hover{\n    background-color:#ddd; }\n  ul.left-side{\n    border-right:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.left-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.left-side li.added .name, ul.left-side li.added .value{\n        opacity:0.2;\n        font-style:italic; }\n      ul.left-side li.added .upper{\n        border-radius:0 0 100% 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        top:0;\n        right:0; }\n        ul.left-side li.added .upper.depth-1{\n          border:2px solid #285828;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-2{\n          border:2px dotted #3f9c3f;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-3{\n          border:1px solid #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-4{\n          border:1px dotted #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .upper.depth-5{\n          border:1px dashed #57d657;\n          border-top-width:0;\n          border-left-width:0; }\n      ul.left-side li.added .lower{\n        border-radius:0 100% 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        position:absolute;\n        pointer-events:none;\n        width:50%;\n        bottom:0;\n        right:0; }\n        ul.left-side li.added .lower.depth-1{\n          border:2px solid #2c612c;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-2{\n          border:2px dotted #3f9c3f;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-3{\n          border:1px solid #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-4{\n          border:1px dotted #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n        ul.left-side li.added .lower.depth-5{\n          border:1px dashed #57d657;\n          border-bottom-width:0;\n          border-left-width:0; }\n      ul.left-side li.removed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.removed .upper:after{\n          content:' - ';\n          color:#f00;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.removed .lower{\n        display:none; }\n      ul.left-side li.removed .tree-node span{\n        color:#f00; }\n      ul.left-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.left-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        width:66px;\n        top:0;\n        right:0;\n        pointer-events:none; }\n        ul.left-side li.name-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.left-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:66px;\n        top:0;\n        right:0; }\n        ul.left-side li.value-changed .upper:after{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-right:10px;\n          font-size:20px;\n          line-height:16px; }\n      ul.left-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul.right-side{\n    border-left:1px solid #444;\n    display:inline-block;\n    margin:0; }\n    ul.right-side li{\n      position:relative;\n      display:table;\n      width:100%; }\n      ul.right-side li.added .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        width:90%;\n        top:0;\n        left:0; }\n        ul.right-side li.added .upper:after{\n          content:'+';\n          color:#4a4;\n          font-weight:bold;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.added .lower{\n        display:none; }\n      ul.right-side li.added .tree-node span{\n        color:#4a4; }\n      ul.right-side li.removed .name, ul.right-side li.removed .value{\n        -webkit-text-decoration-line:line-through;\n                text-decoration-line:line-through;\n        -webkit-text-decoration-color:#ff0600;\n                text-decoration-color:#ff0600; }\n      ul.right-side li.removed .upper{\n        border-radius:0 0 0 100%;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        top:0; }\n        ul.right-side li.removed .upper.depth-1{\n          border:2px solid #700000;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-2{\n          border:2px dotted #ca0303;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-3{\n          border:1px solid #f00;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-4{\n          border:1px dotted #f00;\n          border-top-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .upper.depth-5{\n          border:1px dashed #f00;\n          border-top-width:0;\n          border-right-width:0; }\n      ul.right-side li.removed .lower{\n        border-radius:100% 0 0 0;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:50%;\n        width:10%;\n        position:absolute;\n        pointer-events:none;\n        bottom:0; }\n        ul.right-side li.removed .lower.depth-1{\n          border:2px solid #700000;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-2{\n          border:2px dotted #ca0303;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-3{\n          border:1px solid #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-4{\n          border:1px dotted #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n        ul.right-side li.removed .lower.depth-5{\n          border:1px dashed #f00;\n          border-bottom-width:0;\n          border-right-width:0; }\n      ul.right-side li.type-changed .tree-node span{\n        color:#f00; }\n      ul.right-side li.name-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.name-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.name-changed .tree-node .name{\n        color:#00f; }\n      ul.right-side li.value-changed .upper{\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box;\n        height:100%;\n        position:absolute;\n        pointer-events:none;\n        top:0;\n        left:0; }\n        ul.right-side li.value-changed .upper:before{\n          content:' ~ ';\n          color:#00f;\n          font-weight:bold;\n          float:right;\n          padding-left:5px;\n          font-size:20px;\n          line-height:16px; }\n      ul.right-side li.value-changed .tree-node .value{\n        color:#00f; }\n  ul .tree-node{\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    color:#7c9eb2;\n    display:table;\n    padding:0;\n    position:relative;\n    margin:0;\n    width:100%; }\n    ul .tree-node.depth-0{\n      padding-left:5px; }\n    ul .tree-node.depth-1{\n      padding-left:20px; }\n    ul .tree-node.depth-2{\n      padding-left:40px; }\n    ul .tree-node.depth-3{\n      padding-left:60px; }\n    ul .tree-node.depth-4{\n      padding-left:80px; }\n    ul .tree-node.depth-5{\n      padding-left:100px; }\n    ul .tree-node.depth-6{\n      padding-left:120px; }\n    ul .tree-node.depth-7{\n      padding-left:140px; }\n    ul .tree-node.depth-8{\n      padding-left:160px; }\n    ul .tree-node.depth-9{\n      padding-left:180px; }\n    ul .tree-node.depth-10{\n      padding-left:200px; }\n    ul .tree-node .name{\n      color:#444;\n      font-weight:bold; }\n      ul .tree-node .name:after{\n        content:':'; }\n    ul .tree-node .value.string:before{\n      content:'\"'; }\n    ul .tree-node .value.string:after{\n      content:'\"'; }\n`],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"side\")\r\n  side;\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  mouseOvered(flag, i) {\r\n    if (this.depth === 1) {\r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        side: this.side\r\n      });\r\n    }\r\n  }\r\n}\r\n",
    "/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  template: `<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"left-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"leftSide\"></differentiate-tree>\r\n<differentiate-tree \r\n    class=\"root\" \r\n    level=\"0\" \r\n    side=\"right-side\" \r\n    (onhover)=\"onhover($event)\"\r\n    [children]=\"rightSide\"></differentiate-tree>\r\n\r\n`,\r\n  styles: [`:host{\n  border:1px solid #444;\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:block;\n  max-width:100vw;\n  max-height:300px;\n  overflow-y:auto;\n  position:relative;\n  width:100%; }\n`],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                node.value.toUpperCase() :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value.toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    rightNode.value.toUpperCase() :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value.toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n            leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n            rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n            leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n            rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n            leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n            rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    const newItem = JSON.parse(JSON.stringify(item));\r\n    side.splice(index, 0, newItem);\r\n    this.reIndex(side);\r\n\r\n    item.status = status;\r\n    newItem.status = status;\r\n    this.setChildrenStatus(item.children, status)\r\n    this.setChildrenStatus(newItem.children, status)\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.onlyShowDifferences) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.leftSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n    if (changes.rightSideObject) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const comparision = this.toInternalStruction(this.leftSideObject, this.rightSideObject);\r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root Object\",\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n    }\r\n  }\r\n  onhover(event) {\r\n    let children;\r\n    if (event.side == 'left-side') {\r\n      children = this.rightSide[0].children;\r\n    } else {\r\n      children = this.leftSide[0].children;\r\n    }\r\n    if (children.length > event.index) {\r\n      children[event.index].hover = event.hover;\r\n    }\r\n  }\r\n}\r\n"
  ],
  "names": [
    "Input",
    "Output",
    "Component"
  ],
  "mappings": "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"
}
